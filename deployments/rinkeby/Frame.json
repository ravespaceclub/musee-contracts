{
  "address": "0x5C2eB1733A4C15321Cb1c6F0f20f0A840db3E540",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_baseTokenUri",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_contractUri",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_vrfCoordinator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_link",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_keyHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "_rentalFeeNumerator",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "_rentalFeeDenominator",
          "type": "int256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "EtherWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_exhibitContractAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_exhibitTokenId",
          "type": "uint256"
        }
      ],
      "name": "ExhibitSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "LinkWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "_requestId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "MintFulfilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "_requestId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "MintRequest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "RentalFeeCollectedFrom",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "int256",
          "name": "_oldNumerator",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "_oldDenominator",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "_newNumerator",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "_newDenominator",
          "type": "int256"
        }
      ],
      "name": "RentalFeeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_renter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_rentalExpiryBlock",
          "type": "uint256"
        }
      ],
      "name": "RenterSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PAUSER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PRESALE_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_rentalPrices",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "clearExhibit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_exhibitor",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_exhibitContractAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_exhibitTokenId",
          "type": "uint256"
        }
      ],
      "name": "exhibitIsOwnedBy",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum Frame.Category",
          "name": "_category",
          "type": "uint8"
        }
      ],
      "name": "getCategoryDetail",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getExhibit",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "contractAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "internalType": "struct IExhibitionable.Exhibit",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getExhibitTokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getRentalPricePerBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getRenter",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "renter",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "rentalExpiryBlock",
              "type": "uint256"
            }
          ],
          "internalType": "struct IRentable.Rental",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVersionNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "isCurrentlyRented",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum Frame.Category",
          "name": "_category",
          "type": "uint8"
        }
      ],
      "name": "mintFrame",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "randomness",
          "type": "uint256"
        }
      ],
      "name": "rawFulfillRandomness",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rentalFeeDenominator",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rentalFeeNumerator",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "requestIdToCategory",
      "outputs": [
        {
          "internalType": "enum Frame.Category",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "requestIdToSender",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "requestIdToTokenId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum Frame.Category",
          "name": "_category",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_startingTokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_supply",
          "type": "uint256"
        }
      ],
      "name": "setCategoryDetail",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_exhibitContractAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_exhibitTokenId",
          "type": "uint256"
        }
      ],
      "name": "setExhibit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "_numerator",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "_denominator",
          "type": "int256"
        }
      ],
      "name": "setRentalFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_rentalPrice",
          "type": "uint256"
        }
      ],
      "name": "setRentalPricePerBlock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_renter",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_numberOfBlocks",
          "type": "uint256"
        }
      ],
      "name": "setRenter",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum Frame.SaleStatus",
          "name": "_status",
          "type": "uint8"
        }
      ],
      "name": "setSaleStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "tokenIsRentedByAddress",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "withdrawAllLink",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "withdrawEther",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x2a4cff019a82c28d28ab89676bad3e3dc7e3e2c959a2f1d872f50c5bf9ca32b1",
  "receipt": {
    "to": null,
    "from": "0xD1119ecc85f37f349F84bfA8811565E71581140F",
    "contractAddress": "0x5C2eB1733A4C15321Cb1c6F0f20f0A840db3E540",
    "transactionIndex": 17,
    "gasUsed": "12542536",
    "logsBloom": "0x192400070011080000060026040210d20032000648304518000904517000400080088422014018c0002e040421031040200080052c2818002008201330140000000000204504841100402b0300120000080a80a60001300d00400000c042000040010006822009000240001800003a0400000800018012101000024218188804212008001100008804050094040014800004c0400064808030c0001002000100428400054001008084a01a02480000b0014402826c084001501316d180080040300440004030030a2030102000a88831909a000800074009000120081400220000000000404001088c0108844010033c00020402000420000020000000020040",
    "blockHash": "0x0628a554fb8cab8fcd957229fa3ef52020df440f6fddfdeb76caa2827587ea84",
    "transactionHash": "0x2a4cff019a82c28d28ab89676bad3e3dc7e3e2c959a2f1d872f50c5bf9ca32b1",
    "logs": [
      {
        "transactionIndex": 17,
        "blockNumber": 10163330,
        "transactionHash": "0x2a4cff019a82c28d28ab89676bad3e3dc7e3e2c959a2f1d872f50c5bf9ca32b1",
        "address": "0x5C2eB1733A4C15321Cb1c6F0f20f0A840db3E540",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000d1119ecc85f37f349f84bfa8811565e71581140f",
          "0x000000000000000000000000d1119ecc85f37f349f84bfa8811565e71581140f"
        ],
        "data": "0x",
        "logIndex": 55,
        "blockHash": "0x0628a554fb8cab8fcd957229fa3ef52020df440f6fddfdeb76caa2827587ea84"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 10163330,
        "transactionHash": "0x2a4cff019a82c28d28ab89676bad3e3dc7e3e2c959a2f1d872f50c5bf9ca32b1",
        "address": "0x5C2eB1733A4C15321Cb1c6F0f20f0A840db3E540",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6",
          "0x000000000000000000000000d1119ecc85f37f349f84bfa8811565e71581140f",
          "0x000000000000000000000000d1119ecc85f37f349f84bfa8811565e71581140f"
        ],
        "data": "0x",
        "logIndex": 56,
        "blockHash": "0x0628a554fb8cab8fcd957229fa3ef52020df440f6fddfdeb76caa2827587ea84"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 10163330,
        "transactionHash": "0x2a4cff019a82c28d28ab89676bad3e3dc7e3e2c959a2f1d872f50c5bf9ca32b1",
        "address": "0x5C2eB1733A4C15321Cb1c6F0f20f0A840db3E540",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a",
          "0x000000000000000000000000d1119ecc85f37f349f84bfa8811565e71581140f",
          "0x000000000000000000000000d1119ecc85f37f349f84bfa8811565e71581140f"
        ],
        "data": "0x",
        "logIndex": 57,
        "blockHash": "0x0628a554fb8cab8fcd957229fa3ef52020df440f6fddfdeb76caa2827587ea84"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 10163330,
        "transactionHash": "0x2a4cff019a82c28d28ab89676bad3e3dc7e3e2c959a2f1d872f50c5bf9ca32b1",
        "address": "0x5C2eB1733A4C15321Cb1c6F0f20f0A840db3E540",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x6a4b509b5f306a69ec99e97ff6b166daad9c0a3dfce739a6d67ad1c57143a6b2",
          "0x0000000000000000000000003146242e1b95a1acf64e385c84200600aac78839",
          "0x000000000000000000000000d1119ecc85f37f349f84bfa8811565e71581140f"
        ],
        "data": "0x",
        "logIndex": 58,
        "blockHash": "0x0628a554fb8cab8fcd957229fa3ef52020df440f6fddfdeb76caa2827587ea84"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 10163330,
        "transactionHash": "0x2a4cff019a82c28d28ab89676bad3e3dc7e3e2c959a2f1d872f50c5bf9ca32b1",
        "address": "0x5C2eB1733A4C15321Cb1c6F0f20f0A840db3E540",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x6a4b509b5f306a69ec99e97ff6b166daad9c0a3dfce739a6d67ad1c57143a6b2",
          "0x00000000000000000000000021cf67ebba0f6e18cddb1da09b0361a0fe621565",
          "0x000000000000000000000000d1119ecc85f37f349f84bfa8811565e71581140f"
        ],
        "data": "0x",
        "logIndex": 59,
        "blockHash": "0x0628a554fb8cab8fcd957229fa3ef52020df440f6fddfdeb76caa2827587ea84"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 10163330,
        "transactionHash": "0x2a4cff019a82c28d28ab89676bad3e3dc7e3e2c959a2f1d872f50c5bf9ca32b1",
        "address": "0x5C2eB1733A4C15321Cb1c6F0f20f0A840db3E540",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x6a4b509b5f306a69ec99e97ff6b166daad9c0a3dfce739a6d67ad1c57143a6b2",
          "0x000000000000000000000000b36b0f1d29b127542186ca1995e1d59c4ccd2c7f",
          "0x000000000000000000000000d1119ecc85f37f349f84bfa8811565e71581140f"
        ],
        "data": "0x",
        "logIndex": 60,
        "blockHash": "0x0628a554fb8cab8fcd957229fa3ef52020df440f6fddfdeb76caa2827587ea84"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 10163330,
        "transactionHash": "0x2a4cff019a82c28d28ab89676bad3e3dc7e3e2c959a2f1d872f50c5bf9ca32b1",
        "address": "0x5C2eB1733A4C15321Cb1c6F0f20f0A840db3E540",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x6a4b509b5f306a69ec99e97ff6b166daad9c0a3dfce739a6d67ad1c57143a6b2",
          "0x000000000000000000000000bc2785b363bd5b7c0ae8cdc3874101f888393af5",
          "0x000000000000000000000000d1119ecc85f37f349f84bfa8811565e71581140f"
        ],
        "data": "0x",
        "logIndex": 61,
        "blockHash": "0x0628a554fb8cab8fcd957229fa3ef52020df440f6fddfdeb76caa2827587ea84"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 10163330,
        "transactionHash": "0x2a4cff019a82c28d28ab89676bad3e3dc7e3e2c959a2f1d872f50c5bf9ca32b1",
        "address": "0x5C2eB1733A4C15321Cb1c6F0f20f0A840db3E540",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x6a4b509b5f306a69ec99e97ff6b166daad9c0a3dfce739a6d67ad1c57143a6b2",
          "0x000000000000000000000000f7c9cae52b345f3c8dc8105577e87f7911b52f4d",
          "0x000000000000000000000000d1119ecc85f37f349f84bfa8811565e71581140f"
        ],
        "data": "0x",
        "logIndex": 62,
        "blockHash": "0x0628a554fb8cab8fcd957229fa3ef52020df440f6fddfdeb76caa2827587ea84"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 10163330,
        "transactionHash": "0x2a4cff019a82c28d28ab89676bad3e3dc7e3e2c959a2f1d872f50c5bf9ca32b1",
        "address": "0x5C2eB1733A4C15321Cb1c6F0f20f0A840db3E540",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x6a4b509b5f306a69ec99e97ff6b166daad9c0a3dfce739a6d67ad1c57143a6b2",
          "0x000000000000000000000000d46f082231ef8e975265fb0c143b02b23cdc030d",
          "0x000000000000000000000000d1119ecc85f37f349f84bfa8811565e71581140f"
        ],
        "data": "0x",
        "logIndex": 63,
        "blockHash": "0x0628a554fb8cab8fcd957229fa3ef52020df440f6fddfdeb76caa2827587ea84"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 10163330,
        "transactionHash": "0x2a4cff019a82c28d28ab89676bad3e3dc7e3e2c959a2f1d872f50c5bf9ca32b1",
        "address": "0x5C2eB1733A4C15321Cb1c6F0f20f0A840db3E540",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x6a4b509b5f306a69ec99e97ff6b166daad9c0a3dfce739a6d67ad1c57143a6b2",
          "0x000000000000000000000000c9fd59153c9df38f3e6ab45568b5f8372ab5ab08",
          "0x000000000000000000000000d1119ecc85f37f349f84bfa8811565e71581140f"
        ],
        "data": "0x",
        "logIndex": 64,
        "blockHash": "0x0628a554fb8cab8fcd957229fa3ef52020df440f6fddfdeb76caa2827587ea84"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 10163330,
        "transactionHash": "0x2a4cff019a82c28d28ab89676bad3e3dc7e3e2c959a2f1d872f50c5bf9ca32b1",
        "address": "0x5C2eB1733A4C15321Cb1c6F0f20f0A840db3E540",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x6a4b509b5f306a69ec99e97ff6b166daad9c0a3dfce739a6d67ad1c57143a6b2",
          "0x00000000000000000000000042e3b2b9969308c2fa6c4b71f6a13762e3136a1a",
          "0x000000000000000000000000d1119ecc85f37f349f84bfa8811565e71581140f"
        ],
        "data": "0x",
        "logIndex": 65,
        "blockHash": "0x0628a554fb8cab8fcd957229fa3ef52020df440f6fddfdeb76caa2827587ea84"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 10163330,
        "transactionHash": "0x2a4cff019a82c28d28ab89676bad3e3dc7e3e2c959a2f1d872f50c5bf9ca32b1",
        "address": "0x5C2eB1733A4C15321Cb1c6F0f20f0A840db3E540",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x6a4b509b5f306a69ec99e97ff6b166daad9c0a3dfce739a6d67ad1c57143a6b2",
          "0x0000000000000000000000003d3d5f950b6702f2a13fd4eb2d10a1c15185fd5c",
          "0x000000000000000000000000d1119ecc85f37f349f84bfa8811565e71581140f"
        ],
        "data": "0x",
        "logIndex": 66,
        "blockHash": "0x0628a554fb8cab8fcd957229fa3ef52020df440f6fddfdeb76caa2827587ea84"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 10163330,
        "transactionHash": "0x2a4cff019a82c28d28ab89676bad3e3dc7e3e2c959a2f1d872f50c5bf9ca32b1",
        "address": "0x5C2eB1733A4C15321Cb1c6F0f20f0A840db3E540",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x6a4b509b5f306a69ec99e97ff6b166daad9c0a3dfce739a6d67ad1c57143a6b2",
          "0x000000000000000000000000bd9d1d31a6a451f7a8ec61fc5fd491fd59d5f489",
          "0x000000000000000000000000d1119ecc85f37f349f84bfa8811565e71581140f"
        ],
        "data": "0x",
        "logIndex": 67,
        "blockHash": "0x0628a554fb8cab8fcd957229fa3ef52020df440f6fddfdeb76caa2827587ea84"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 10163330,
        "transactionHash": "0x2a4cff019a82c28d28ab89676bad3e3dc7e3e2c959a2f1d872f50c5bf9ca32b1",
        "address": "0x5C2eB1733A4C15321Cb1c6F0f20f0A840db3E540",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x6a4b509b5f306a69ec99e97ff6b166daad9c0a3dfce739a6d67ad1c57143a6b2",
          "0x0000000000000000000000003342d7df6806600dba1fcd48d1222825dfdbcb78",
          "0x000000000000000000000000d1119ecc85f37f349f84bfa8811565e71581140f"
        ],
        "data": "0x",
        "logIndex": 68,
        "blockHash": "0x0628a554fb8cab8fcd957229fa3ef52020df440f6fddfdeb76caa2827587ea84"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 10163330,
        "transactionHash": "0x2a4cff019a82c28d28ab89676bad3e3dc7e3e2c959a2f1d872f50c5bf9ca32b1",
        "address": "0x5C2eB1733A4C15321Cb1c6F0f20f0A840db3E540",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x6a4b509b5f306a69ec99e97ff6b166daad9c0a3dfce739a6d67ad1c57143a6b2",
          "0x0000000000000000000000002203035b20499f5c515ea8abcd7e597d9d1074f3",
          "0x000000000000000000000000d1119ecc85f37f349f84bfa8811565e71581140f"
        ],
        "data": "0x",
        "logIndex": 69,
        "blockHash": "0x0628a554fb8cab8fcd957229fa3ef52020df440f6fddfdeb76caa2827587ea84"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 10163330,
        "transactionHash": "0x2a4cff019a82c28d28ab89676bad3e3dc7e3e2c959a2f1d872f50c5bf9ca32b1",
        "address": "0x5C2eB1733A4C15321Cb1c6F0f20f0A840db3E540",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x6a4b509b5f306a69ec99e97ff6b166daad9c0a3dfce739a6d67ad1c57143a6b2",
          "0x0000000000000000000000006d8f32a67ee02292431a1249a5e8aaca156425ca",
          "0x000000000000000000000000d1119ecc85f37f349f84bfa8811565e71581140f"
        ],
        "data": "0x",
        "logIndex": 70,
        "blockHash": "0x0628a554fb8cab8fcd957229fa3ef52020df440f6fddfdeb76caa2827587ea84"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 10163330,
        "transactionHash": "0x2a4cff019a82c28d28ab89676bad3e3dc7e3e2c959a2f1d872f50c5bf9ca32b1",
        "address": "0x5C2eB1733A4C15321Cb1c6F0f20f0A840db3E540",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x6a4b509b5f306a69ec99e97ff6b166daad9c0a3dfce739a6d67ad1c57143a6b2",
          "0x000000000000000000000000eec9f7a228c212ab363ad1156e4933556d6a72a9",
          "0x000000000000000000000000d1119ecc85f37f349f84bfa8811565e71581140f"
        ],
        "data": "0x",
        "logIndex": 71,
        "blockHash": "0x0628a554fb8cab8fcd957229fa3ef52020df440f6fddfdeb76caa2827587ea84"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 10163330,
        "transactionHash": "0x2a4cff019a82c28d28ab89676bad3e3dc7e3e2c959a2f1d872f50c5bf9ca32b1",
        "address": "0x5C2eB1733A4C15321Cb1c6F0f20f0A840db3E540",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x6a4b509b5f306a69ec99e97ff6b166daad9c0a3dfce739a6d67ad1c57143a6b2",
          "0x000000000000000000000000d813824721afeaf441a35bdbfea49261f2edf5ca",
          "0x000000000000000000000000d1119ecc85f37f349f84bfa8811565e71581140f"
        ],
        "data": "0x",
        "logIndex": 72,
        "blockHash": "0x0628a554fb8cab8fcd957229fa3ef52020df440f6fddfdeb76caa2827587ea84"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 10163330,
        "transactionHash": "0x2a4cff019a82c28d28ab89676bad3e3dc7e3e2c959a2f1d872f50c5bf9ca32b1",
        "address": "0x5C2eB1733A4C15321Cb1c6F0f20f0A840db3E540",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x6a4b509b5f306a69ec99e97ff6b166daad9c0a3dfce739a6d67ad1c57143a6b2",
          "0x000000000000000000000000eee987dd48a8bd7071812232473ee847a235c02f",
          "0x000000000000000000000000d1119ecc85f37f349f84bfa8811565e71581140f"
        ],
        "data": "0x",
        "logIndex": 73,
        "blockHash": "0x0628a554fb8cab8fcd957229fa3ef52020df440f6fddfdeb76caa2827587ea84"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 10163330,
        "transactionHash": "0x2a4cff019a82c28d28ab89676bad3e3dc7e3e2c959a2f1d872f50c5bf9ca32b1",
        "address": "0x5C2eB1733A4C15321Cb1c6F0f20f0A840db3E540",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x6a4b509b5f306a69ec99e97ff6b166daad9c0a3dfce739a6d67ad1c57143a6b2",
          "0x00000000000000000000000014bac35ac95ebb8828307806ac748bb7321a0026",
          "0x000000000000000000000000d1119ecc85f37f349f84bfa8811565e71581140f"
        ],
        "data": "0x",
        "logIndex": 74,
        "blockHash": "0x0628a554fb8cab8fcd957229fa3ef52020df440f6fddfdeb76caa2827587ea84"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 10163330,
        "transactionHash": "0x2a4cff019a82c28d28ab89676bad3e3dc7e3e2c959a2f1d872f50c5bf9ca32b1",
        "address": "0x5C2eB1733A4C15321Cb1c6F0f20f0A840db3E540",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x6a4b509b5f306a69ec99e97ff6b166daad9c0a3dfce739a6d67ad1c57143a6b2",
          "0x00000000000000000000000050db2a16b185a894edffd076558c2694767c1280",
          "0x000000000000000000000000d1119ecc85f37f349f84bfa8811565e71581140f"
        ],
        "data": "0x",
        "logIndex": 75,
        "blockHash": "0x0628a554fb8cab8fcd957229fa3ef52020df440f6fddfdeb76caa2827587ea84"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 10163330,
        "transactionHash": "0x2a4cff019a82c28d28ab89676bad3e3dc7e3e2c959a2f1d872f50c5bf9ca32b1",
        "address": "0x5C2eB1733A4C15321Cb1c6F0f20f0A840db3E540",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x6a4b509b5f306a69ec99e97ff6b166daad9c0a3dfce739a6d67ad1c57143a6b2",
          "0x00000000000000000000000008b4b79a44364f7d8a9bf737c704bd59ebccfb27",
          "0x000000000000000000000000d1119ecc85f37f349f84bfa8811565e71581140f"
        ],
        "data": "0x",
        "logIndex": 76,
        "blockHash": "0x0628a554fb8cab8fcd957229fa3ef52020df440f6fddfdeb76caa2827587ea84"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 10163330,
        "transactionHash": "0x2a4cff019a82c28d28ab89676bad3e3dc7e3e2c959a2f1d872f50c5bf9ca32b1",
        "address": "0x5C2eB1733A4C15321Cb1c6F0f20f0A840db3E540",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x6a4b509b5f306a69ec99e97ff6b166daad9c0a3dfce739a6d67ad1c57143a6b2",
          "0x000000000000000000000000d1b9b828a727a03c0947613c81ede59e354e84b7",
          "0x000000000000000000000000d1119ecc85f37f349f84bfa8811565e71581140f"
        ],
        "data": "0x",
        "logIndex": 77,
        "blockHash": "0x0628a554fb8cab8fcd957229fa3ef52020df440f6fddfdeb76caa2827587ea84"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 10163330,
        "transactionHash": "0x2a4cff019a82c28d28ab89676bad3e3dc7e3e2c959a2f1d872f50c5bf9ca32b1",
        "address": "0x5C2eB1733A4C15321Cb1c6F0f20f0A840db3E540",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x6a4b509b5f306a69ec99e97ff6b166daad9c0a3dfce739a6d67ad1c57143a6b2",
          "0x000000000000000000000000d9bead417c25ce07ee87c201619ee3f0bd77940d",
          "0x000000000000000000000000d1119ecc85f37f349f84bfa8811565e71581140f"
        ],
        "data": "0x",
        "logIndex": 78,
        "blockHash": "0x0628a554fb8cab8fcd957229fa3ef52020df440f6fddfdeb76caa2827587ea84"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 10163330,
        "transactionHash": "0x2a4cff019a82c28d28ab89676bad3e3dc7e3e2c959a2f1d872f50c5bf9ca32b1",
        "address": "0x5C2eB1733A4C15321Cb1c6F0f20f0A840db3E540",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x6a4b509b5f306a69ec99e97ff6b166daad9c0a3dfce739a6d67ad1c57143a6b2",
          "0x000000000000000000000000a1f14fc2ccb14ea4856208dc21d9b77b83c2134d",
          "0x000000000000000000000000d1119ecc85f37f349f84bfa8811565e71581140f"
        ],
        "data": "0x",
        "logIndex": 79,
        "blockHash": "0x0628a554fb8cab8fcd957229fa3ef52020df440f6fddfdeb76caa2827587ea84"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 10163330,
        "transactionHash": "0x2a4cff019a82c28d28ab89676bad3e3dc7e3e2c959a2f1d872f50c5bf9ca32b1",
        "address": "0x5C2eB1733A4C15321Cb1c6F0f20f0A840db3E540",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x6a4b509b5f306a69ec99e97ff6b166daad9c0a3dfce739a6d67ad1c57143a6b2",
          "0x00000000000000000000000070c68d5e579ece1bf3a0a3ac03c42020b41693c3",
          "0x000000000000000000000000d1119ecc85f37f349f84bfa8811565e71581140f"
        ],
        "data": "0x",
        "logIndex": 80,
        "blockHash": "0x0628a554fb8cab8fcd957229fa3ef52020df440f6fddfdeb76caa2827587ea84"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 10163330,
        "transactionHash": "0x2a4cff019a82c28d28ab89676bad3e3dc7e3e2c959a2f1d872f50c5bf9ca32b1",
        "address": "0x5C2eB1733A4C15321Cb1c6F0f20f0A840db3E540",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x6a4b509b5f306a69ec99e97ff6b166daad9c0a3dfce739a6d67ad1c57143a6b2",
          "0x000000000000000000000000f636c77ffb54ed04fd869142d59968e5d6a2ab6c",
          "0x000000000000000000000000d1119ecc85f37f349f84bfa8811565e71581140f"
        ],
        "data": "0x",
        "logIndex": 81,
        "blockHash": "0x0628a554fb8cab8fcd957229fa3ef52020df440f6fddfdeb76caa2827587ea84"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 10163330,
        "transactionHash": "0x2a4cff019a82c28d28ab89676bad3e3dc7e3e2c959a2f1d872f50c5bf9ca32b1",
        "address": "0x5C2eB1733A4C15321Cb1c6F0f20f0A840db3E540",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x6a4b509b5f306a69ec99e97ff6b166daad9c0a3dfce739a6d67ad1c57143a6b2",
          "0x0000000000000000000000003380582390ec5c3d956107c6472b352cc917e955",
          "0x000000000000000000000000d1119ecc85f37f349f84bfa8811565e71581140f"
        ],
        "data": "0x",
        "logIndex": 82,
        "blockHash": "0x0628a554fb8cab8fcd957229fa3ef52020df440f6fddfdeb76caa2827587ea84"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 10163330,
        "transactionHash": "0x2a4cff019a82c28d28ab89676bad3e3dc7e3e2c959a2f1d872f50c5bf9ca32b1",
        "address": "0x5C2eB1733A4C15321Cb1c6F0f20f0A840db3E540",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x6a4b509b5f306a69ec99e97ff6b166daad9c0a3dfce739a6d67ad1c57143a6b2",
          "0x000000000000000000000000d48c866ccb1c540b74fdfebe398103312ee9367d",
          "0x000000000000000000000000d1119ecc85f37f349f84bfa8811565e71581140f"
        ],
        "data": "0x",
        "logIndex": 83,
        "blockHash": "0x0628a554fb8cab8fcd957229fa3ef52020df440f6fddfdeb76caa2827587ea84"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 10163330,
        "transactionHash": "0x2a4cff019a82c28d28ab89676bad3e3dc7e3e2c959a2f1d872f50c5bf9ca32b1",
        "address": "0x5C2eB1733A4C15321Cb1c6F0f20f0A840db3E540",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x6a4b509b5f306a69ec99e97ff6b166daad9c0a3dfce739a6d67ad1c57143a6b2",
          "0x0000000000000000000000006ee9209ef6e3624fc7f5829be6eb1b729d6f80ee",
          "0x000000000000000000000000d1119ecc85f37f349f84bfa8811565e71581140f"
        ],
        "data": "0x",
        "logIndex": 84,
        "blockHash": "0x0628a554fb8cab8fcd957229fa3ef52020df440f6fddfdeb76caa2827587ea84"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 10163330,
        "transactionHash": "0x2a4cff019a82c28d28ab89676bad3e3dc7e3e2c959a2f1d872f50c5bf9ca32b1",
        "address": "0x5C2eB1733A4C15321Cb1c6F0f20f0A840db3E540",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x6a4b509b5f306a69ec99e97ff6b166daad9c0a3dfce739a6d67ad1c57143a6b2",
          "0x000000000000000000000000fa634e983fddd3e1225227e8bceec244670263c7",
          "0x000000000000000000000000d1119ecc85f37f349f84bfa8811565e71581140f"
        ],
        "data": "0x",
        "logIndex": 85,
        "blockHash": "0x0628a554fb8cab8fcd957229fa3ef52020df440f6fddfdeb76caa2827587ea84"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 10163330,
        "transactionHash": "0x2a4cff019a82c28d28ab89676bad3e3dc7e3e2c959a2f1d872f50c5bf9ca32b1",
        "address": "0x5C2eB1733A4C15321Cb1c6F0f20f0A840db3E540",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x6a4b509b5f306a69ec99e97ff6b166daad9c0a3dfce739a6d67ad1c57143a6b2",
          "0x0000000000000000000000006367b50a56fd7874288269680469afba4e1ca7e6",
          "0x000000000000000000000000d1119ecc85f37f349f84bfa8811565e71581140f"
        ],
        "data": "0x",
        "logIndex": 86,
        "blockHash": "0x0628a554fb8cab8fcd957229fa3ef52020df440f6fddfdeb76caa2827587ea84"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 10163330,
        "transactionHash": "0x2a4cff019a82c28d28ab89676bad3e3dc7e3e2c959a2f1d872f50c5bf9ca32b1",
        "address": "0x5C2eB1733A4C15321Cb1c6F0f20f0A840db3E540",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x6a4b509b5f306a69ec99e97ff6b166daad9c0a3dfce739a6d67ad1c57143a6b2",
          "0x0000000000000000000000009aaa0d92888f1c31f7678ef18c77c78f3a65e348",
          "0x000000000000000000000000d1119ecc85f37f349f84bfa8811565e71581140f"
        ],
        "data": "0x",
        "logIndex": 87,
        "blockHash": "0x0628a554fb8cab8fcd957229fa3ef52020df440f6fddfdeb76caa2827587ea84"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 10163330,
        "transactionHash": "0x2a4cff019a82c28d28ab89676bad3e3dc7e3e2c959a2f1d872f50c5bf9ca32b1",
        "address": "0x5C2eB1733A4C15321Cb1c6F0f20f0A840db3E540",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x6a4b509b5f306a69ec99e97ff6b166daad9c0a3dfce739a6d67ad1c57143a6b2",
          "0x0000000000000000000000009666df32d66a10fa90bc3e42e531eb14a2d9b064",
          "0x000000000000000000000000d1119ecc85f37f349f84bfa8811565e71581140f"
        ],
        "data": "0x",
        "logIndex": 88,
        "blockHash": "0x0628a554fb8cab8fcd957229fa3ef52020df440f6fddfdeb76caa2827587ea84"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 10163330,
        "transactionHash": "0x2a4cff019a82c28d28ab89676bad3e3dc7e3e2c959a2f1d872f50c5bf9ca32b1",
        "address": "0x5C2eB1733A4C15321Cb1c6F0f20f0A840db3E540",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x6a4b509b5f306a69ec99e97ff6b166daad9c0a3dfce739a6d67ad1c57143a6b2",
          "0x0000000000000000000000009a76b2babee120843ab316e2aec97876055fefdf",
          "0x000000000000000000000000d1119ecc85f37f349f84bfa8811565e71581140f"
        ],
        "data": "0x",
        "logIndex": 89,
        "blockHash": "0x0628a554fb8cab8fcd957229fa3ef52020df440f6fddfdeb76caa2827587ea84"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 10163330,
        "transactionHash": "0x2a4cff019a82c28d28ab89676bad3e3dc7e3e2c959a2f1d872f50c5bf9ca32b1",
        "address": "0x5C2eB1733A4C15321Cb1c6F0f20f0A840db3E540",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x6a4b509b5f306a69ec99e97ff6b166daad9c0a3dfce739a6d67ad1c57143a6b2",
          "0x000000000000000000000000ff36e4237a5dac9b9ac10bcd7b6d7a969483293f",
          "0x000000000000000000000000d1119ecc85f37f349f84bfa8811565e71581140f"
        ],
        "data": "0x",
        "logIndex": 90,
        "blockHash": "0x0628a554fb8cab8fcd957229fa3ef52020df440f6fddfdeb76caa2827587ea84"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 10163330,
        "transactionHash": "0x2a4cff019a82c28d28ab89676bad3e3dc7e3e2c959a2f1d872f50c5bf9ca32b1",
        "address": "0x5C2eB1733A4C15321Cb1c6F0f20f0A840db3E540",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x6a4b509b5f306a69ec99e97ff6b166daad9c0a3dfce739a6d67ad1c57143a6b2",
          "0x000000000000000000000000a6a0c9a482fc762d5496185261998fb3c706928e",
          "0x000000000000000000000000d1119ecc85f37f349f84bfa8811565e71581140f"
        ],
        "data": "0x",
        "logIndex": 91,
        "blockHash": "0x0628a554fb8cab8fcd957229fa3ef52020df440f6fddfdeb76caa2827587ea84"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 10163330,
        "transactionHash": "0x2a4cff019a82c28d28ab89676bad3e3dc7e3e2c959a2f1d872f50c5bf9ca32b1",
        "address": "0x5C2eB1733A4C15321Cb1c6F0f20f0A840db3E540",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x6a4b509b5f306a69ec99e97ff6b166daad9c0a3dfce739a6d67ad1c57143a6b2",
          "0x00000000000000000000000040e18743699644c805fe8f2946e1147d207747b5",
          "0x000000000000000000000000d1119ecc85f37f349f84bfa8811565e71581140f"
        ],
        "data": "0x",
        "logIndex": 92,
        "blockHash": "0x0628a554fb8cab8fcd957229fa3ef52020df440f6fddfdeb76caa2827587ea84"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 10163330,
        "transactionHash": "0x2a4cff019a82c28d28ab89676bad3e3dc7e3e2c959a2f1d872f50c5bf9ca32b1",
        "address": "0x5C2eB1733A4C15321Cb1c6F0f20f0A840db3E540",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x6a4b509b5f306a69ec99e97ff6b166daad9c0a3dfce739a6d67ad1c57143a6b2",
          "0x000000000000000000000000ad5cf99ca2a181abf2a2face08cefd45ad94ed60",
          "0x000000000000000000000000d1119ecc85f37f349f84bfa8811565e71581140f"
        ],
        "data": "0x",
        "logIndex": 93,
        "blockHash": "0x0628a554fb8cab8fcd957229fa3ef52020df440f6fddfdeb76caa2827587ea84"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 10163330,
        "transactionHash": "0x2a4cff019a82c28d28ab89676bad3e3dc7e3e2c959a2f1d872f50c5bf9ca32b1",
        "address": "0x5C2eB1733A4C15321Cb1c6F0f20f0A840db3E540",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x6a4b509b5f306a69ec99e97ff6b166daad9c0a3dfce739a6d67ad1c57143a6b2",
          "0x000000000000000000000000ca68ccfcc97a8075ae7163a7b86a5ee1aa09a4ca",
          "0x000000000000000000000000d1119ecc85f37f349f84bfa8811565e71581140f"
        ],
        "data": "0x",
        "logIndex": 94,
        "blockHash": "0x0628a554fb8cab8fcd957229fa3ef52020df440f6fddfdeb76caa2827587ea84"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 10163330,
        "transactionHash": "0x2a4cff019a82c28d28ab89676bad3e3dc7e3e2c959a2f1d872f50c5bf9ca32b1",
        "address": "0x5C2eB1733A4C15321Cb1c6F0f20f0A840db3E540",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x6a4b509b5f306a69ec99e97ff6b166daad9c0a3dfce739a6d67ad1c57143a6b2",
          "0x0000000000000000000000007298b0fb3fbb1a2900364f45f9f0f92b65ace069",
          "0x000000000000000000000000d1119ecc85f37f349f84bfa8811565e71581140f"
        ],
        "data": "0x",
        "logIndex": 95,
        "blockHash": "0x0628a554fb8cab8fcd957229fa3ef52020df440f6fddfdeb76caa2827587ea84"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 10163330,
        "transactionHash": "0x2a4cff019a82c28d28ab89676bad3e3dc7e3e2c959a2f1d872f50c5bf9ca32b1",
        "address": "0x5C2eB1733A4C15321Cb1c6F0f20f0A840db3E540",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x6a4b509b5f306a69ec99e97ff6b166daad9c0a3dfce739a6d67ad1c57143a6b2",
          "0x0000000000000000000000002906f37e8e6d43ca035488da1f870c93d70d04fb",
          "0x000000000000000000000000d1119ecc85f37f349f84bfa8811565e71581140f"
        ],
        "data": "0x",
        "logIndex": 96,
        "blockHash": "0x0628a554fb8cab8fcd957229fa3ef52020df440f6fddfdeb76caa2827587ea84"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 10163330,
        "transactionHash": "0x2a4cff019a82c28d28ab89676bad3e3dc7e3e2c959a2f1d872f50c5bf9ca32b1",
        "address": "0x5C2eB1733A4C15321Cb1c6F0f20f0A840db3E540",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x6a4b509b5f306a69ec99e97ff6b166daad9c0a3dfce739a6d67ad1c57143a6b2",
          "0x00000000000000000000000072a0726ae7a9054476a8c7e759962a4da667175f",
          "0x000000000000000000000000d1119ecc85f37f349f84bfa8811565e71581140f"
        ],
        "data": "0x",
        "logIndex": 97,
        "blockHash": "0x0628a554fb8cab8fcd957229fa3ef52020df440f6fddfdeb76caa2827587ea84"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 10163330,
        "transactionHash": "0x2a4cff019a82c28d28ab89676bad3e3dc7e3e2c959a2f1d872f50c5bf9ca32b1",
        "address": "0x5C2eB1733A4C15321Cb1c6F0f20f0A840db3E540",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x6a4b509b5f306a69ec99e97ff6b166daad9c0a3dfce739a6d67ad1c57143a6b2",
          "0x000000000000000000000000f2da64cf36e390957a912ae04342ebf70857ebac",
          "0x000000000000000000000000d1119ecc85f37f349f84bfa8811565e71581140f"
        ],
        "data": "0x",
        "logIndex": 98,
        "blockHash": "0x0628a554fb8cab8fcd957229fa3ef52020df440f6fddfdeb76caa2827587ea84"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 10163330,
        "transactionHash": "0x2a4cff019a82c28d28ab89676bad3e3dc7e3e2c959a2f1d872f50c5bf9ca32b1",
        "address": "0x5C2eB1733A4C15321Cb1c6F0f20f0A840db3E540",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x6a4b509b5f306a69ec99e97ff6b166daad9c0a3dfce739a6d67ad1c57143a6b2",
          "0x000000000000000000000000645d875519cdaada97c6ac2ef3d213d04b51359f",
          "0x000000000000000000000000d1119ecc85f37f349f84bfa8811565e71581140f"
        ],
        "data": "0x",
        "logIndex": 99,
        "blockHash": "0x0628a554fb8cab8fcd957229fa3ef52020df440f6fddfdeb76caa2827587ea84"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 10163330,
        "transactionHash": "0x2a4cff019a82c28d28ab89676bad3e3dc7e3e2c959a2f1d872f50c5bf9ca32b1",
        "address": "0x5C2eB1733A4C15321Cb1c6F0f20f0A840db3E540",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x6a4b509b5f306a69ec99e97ff6b166daad9c0a3dfce739a6d67ad1c57143a6b2",
          "0x000000000000000000000000fb388500b3dd8e908c88efcfe86d3f5b9d604747",
          "0x000000000000000000000000d1119ecc85f37f349f84bfa8811565e71581140f"
        ],
        "data": "0x",
        "logIndex": 100,
        "blockHash": "0x0628a554fb8cab8fcd957229fa3ef52020df440f6fddfdeb76caa2827587ea84"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 10163330,
        "transactionHash": "0x2a4cff019a82c28d28ab89676bad3e3dc7e3e2c959a2f1d872f50c5bf9ca32b1",
        "address": "0x5C2eB1733A4C15321Cb1c6F0f20f0A840db3E540",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x6a4b509b5f306a69ec99e97ff6b166daad9c0a3dfce739a6d67ad1c57143a6b2",
          "0x00000000000000000000000056e2b3a3f27789da27858eabeca4461700162ffd",
          "0x000000000000000000000000d1119ecc85f37f349f84bfa8811565e71581140f"
        ],
        "data": "0x",
        "logIndex": 101,
        "blockHash": "0x0628a554fb8cab8fcd957229fa3ef52020df440f6fddfdeb76caa2827587ea84"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 10163330,
        "transactionHash": "0x2a4cff019a82c28d28ab89676bad3e3dc7e3e2c959a2f1d872f50c5bf9ca32b1",
        "address": "0x5C2eB1733A4C15321Cb1c6F0f20f0A840db3E540",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x6a4b509b5f306a69ec99e97ff6b166daad9c0a3dfce739a6d67ad1c57143a6b2",
          "0x0000000000000000000000007e064a3a972e8dd2cd0e26faa6730c00fae2aa0a",
          "0x000000000000000000000000d1119ecc85f37f349f84bfa8811565e71581140f"
        ],
        "data": "0x",
        "logIndex": 102,
        "blockHash": "0x0628a554fb8cab8fcd957229fa3ef52020df440f6fddfdeb76caa2827587ea84"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 10163330,
        "transactionHash": "0x2a4cff019a82c28d28ab89676bad3e3dc7e3e2c959a2f1d872f50c5bf9ca32b1",
        "address": "0x5C2eB1733A4C15321Cb1c6F0f20f0A840db3E540",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x6a4b509b5f306a69ec99e97ff6b166daad9c0a3dfce739a6d67ad1c57143a6b2",
          "0x000000000000000000000000632e75cedf495ccd2cb891b55ed97e4aa11ec946",
          "0x000000000000000000000000d1119ecc85f37f349f84bfa8811565e71581140f"
        ],
        "data": "0x",
        "logIndex": 103,
        "blockHash": "0x0628a554fb8cab8fcd957229fa3ef52020df440f6fddfdeb76caa2827587ea84"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 10163330,
        "transactionHash": "0x2a4cff019a82c28d28ab89676bad3e3dc7e3e2c959a2f1d872f50c5bf9ca32b1",
        "address": "0x5C2eB1733A4C15321Cb1c6F0f20f0A840db3E540",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x6a4b509b5f306a69ec99e97ff6b166daad9c0a3dfce739a6d67ad1c57143a6b2",
          "0x000000000000000000000000341ff27f5c3e3376d092cd19c8eac4ccb1b7ceae",
          "0x000000000000000000000000d1119ecc85f37f349f84bfa8811565e71581140f"
        ],
        "data": "0x",
        "logIndex": 104,
        "blockHash": "0x0628a554fb8cab8fcd957229fa3ef52020df440f6fddfdeb76caa2827587ea84"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 10163330,
        "transactionHash": "0x2a4cff019a82c28d28ab89676bad3e3dc7e3e2c959a2f1d872f50c5bf9ca32b1",
        "address": "0x5C2eB1733A4C15321Cb1c6F0f20f0A840db3E540",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x6a4b509b5f306a69ec99e97ff6b166daad9c0a3dfce739a6d67ad1c57143a6b2",
          "0x000000000000000000000000aaed29c2b8f389a7192d41d1c28d1ba61e307d20",
          "0x000000000000000000000000d1119ecc85f37f349f84bfa8811565e71581140f"
        ],
        "data": "0x",
        "logIndex": 105,
        "blockHash": "0x0628a554fb8cab8fcd957229fa3ef52020df440f6fddfdeb76caa2827587ea84"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 10163330,
        "transactionHash": "0x2a4cff019a82c28d28ab89676bad3e3dc7e3e2c959a2f1d872f50c5bf9ca32b1",
        "address": "0x5C2eB1733A4C15321Cb1c6F0f20f0A840db3E540",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x6a4b509b5f306a69ec99e97ff6b166daad9c0a3dfce739a6d67ad1c57143a6b2",
          "0x00000000000000000000000059234591ae5246b8dc35b07eedf9e1e93d28c8be",
          "0x000000000000000000000000d1119ecc85f37f349f84bfa8811565e71581140f"
        ],
        "data": "0x",
        "logIndex": 106,
        "blockHash": "0x0628a554fb8cab8fcd957229fa3ef52020df440f6fddfdeb76caa2827587ea84"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 10163330,
        "transactionHash": "0x2a4cff019a82c28d28ab89676bad3e3dc7e3e2c959a2f1d872f50c5bf9ca32b1",
        "address": "0x5C2eB1733A4C15321Cb1c6F0f20f0A840db3E540",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x6a4b509b5f306a69ec99e97ff6b166daad9c0a3dfce739a6d67ad1c57143a6b2",
          "0x0000000000000000000000000e31a27f6f1e7142c9c7f7f4f254c513fabd1e1b",
          "0x000000000000000000000000d1119ecc85f37f349f84bfa8811565e71581140f"
        ],
        "data": "0x",
        "logIndex": 107,
        "blockHash": "0x0628a554fb8cab8fcd957229fa3ef52020df440f6fddfdeb76caa2827587ea84"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 10163330,
        "transactionHash": "0x2a4cff019a82c28d28ab89676bad3e3dc7e3e2c959a2f1d872f50c5bf9ca32b1",
        "address": "0x5C2eB1733A4C15321Cb1c6F0f20f0A840db3E540",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x6a4b509b5f306a69ec99e97ff6b166daad9c0a3dfce739a6d67ad1c57143a6b2",
          "0x0000000000000000000000006344a87d1a871798ec2213d5c94da17de7012399",
          "0x000000000000000000000000d1119ecc85f37f349f84bfa8811565e71581140f"
        ],
        "data": "0x",
        "logIndex": 108,
        "blockHash": "0x0628a554fb8cab8fcd957229fa3ef52020df440f6fddfdeb76caa2827587ea84"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 10163330,
        "transactionHash": "0x2a4cff019a82c28d28ab89676bad3e3dc7e3e2c959a2f1d872f50c5bf9ca32b1",
        "address": "0x5C2eB1733A4C15321Cb1c6F0f20f0A840db3E540",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x6a4b509b5f306a69ec99e97ff6b166daad9c0a3dfce739a6d67ad1c57143a6b2",
          "0x000000000000000000000000a8668e1639733f070c818a155eebd69cde93c5f3",
          "0x000000000000000000000000d1119ecc85f37f349f84bfa8811565e71581140f"
        ],
        "data": "0x",
        "logIndex": 109,
        "blockHash": "0x0628a554fb8cab8fcd957229fa3ef52020df440f6fddfdeb76caa2827587ea84"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 10163330,
        "transactionHash": "0x2a4cff019a82c28d28ab89676bad3e3dc7e3e2c959a2f1d872f50c5bf9ca32b1",
        "address": "0x5C2eB1733A4C15321Cb1c6F0f20f0A840db3E540",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x6a4b509b5f306a69ec99e97ff6b166daad9c0a3dfce739a6d67ad1c57143a6b2",
          "0x00000000000000000000000032becc88186152fffa9db99fb830b66f6396c630",
          "0x000000000000000000000000d1119ecc85f37f349f84bfa8811565e71581140f"
        ],
        "data": "0x",
        "logIndex": 110,
        "blockHash": "0x0628a554fb8cab8fcd957229fa3ef52020df440f6fddfdeb76caa2827587ea84"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 10163330,
        "transactionHash": "0x2a4cff019a82c28d28ab89676bad3e3dc7e3e2c959a2f1d872f50c5bf9ca32b1",
        "address": "0x5C2eB1733A4C15321Cb1c6F0f20f0A840db3E540",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x6a4b509b5f306a69ec99e97ff6b166daad9c0a3dfce739a6d67ad1c57143a6b2",
          "0x0000000000000000000000003dc6d8312c906feac4c9c6ad06884cf477f8a708",
          "0x000000000000000000000000d1119ecc85f37f349f84bfa8811565e71581140f"
        ],
        "data": "0x",
        "logIndex": 111,
        "blockHash": "0x0628a554fb8cab8fcd957229fa3ef52020df440f6fddfdeb76caa2827587ea84"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 10163330,
        "transactionHash": "0x2a4cff019a82c28d28ab89676bad3e3dc7e3e2c959a2f1d872f50c5bf9ca32b1",
        "address": "0x5C2eB1733A4C15321Cb1c6F0f20f0A840db3E540",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x6a4b509b5f306a69ec99e97ff6b166daad9c0a3dfce739a6d67ad1c57143a6b2",
          "0x000000000000000000000000380336041fed6d3de0c0a1f5079668760cd64779",
          "0x000000000000000000000000d1119ecc85f37f349f84bfa8811565e71581140f"
        ],
        "data": "0x",
        "logIndex": 112,
        "blockHash": "0x0628a554fb8cab8fcd957229fa3ef52020df440f6fddfdeb76caa2827587ea84"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 10163330,
        "transactionHash": "0x2a4cff019a82c28d28ab89676bad3e3dc7e3e2c959a2f1d872f50c5bf9ca32b1",
        "address": "0x5C2eB1733A4C15321Cb1c6F0f20f0A840db3E540",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x6a4b509b5f306a69ec99e97ff6b166daad9c0a3dfce739a6d67ad1c57143a6b2",
          "0x000000000000000000000000382981dfcf4e5164b5430c4fabbee2bf7d6e3d5d",
          "0x000000000000000000000000d1119ecc85f37f349f84bfa8811565e71581140f"
        ],
        "data": "0x",
        "logIndex": 113,
        "blockHash": "0x0628a554fb8cab8fcd957229fa3ef52020df440f6fddfdeb76caa2827587ea84"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 10163330,
        "transactionHash": "0x2a4cff019a82c28d28ab89676bad3e3dc7e3e2c959a2f1d872f50c5bf9ca32b1",
        "address": "0x5C2eB1733A4C15321Cb1c6F0f20f0A840db3E540",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x6a4b509b5f306a69ec99e97ff6b166daad9c0a3dfce739a6d67ad1c57143a6b2",
          "0x00000000000000000000000047fd829cd4a550e7ff216599483b171ca9abacb8",
          "0x000000000000000000000000d1119ecc85f37f349f84bfa8811565e71581140f"
        ],
        "data": "0x",
        "logIndex": 114,
        "blockHash": "0x0628a554fb8cab8fcd957229fa3ef52020df440f6fddfdeb76caa2827587ea84"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 10163330,
        "transactionHash": "0x2a4cff019a82c28d28ab89676bad3e3dc7e3e2c959a2f1d872f50c5bf9ca32b1",
        "address": "0x5C2eB1733A4C15321Cb1c6F0f20f0A840db3E540",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x6a4b509b5f306a69ec99e97ff6b166daad9c0a3dfce739a6d67ad1c57143a6b2",
          "0x000000000000000000000000c3c136122d7819da60b5f7550a1ac689d1e7eef2",
          "0x000000000000000000000000d1119ecc85f37f349f84bfa8811565e71581140f"
        ],
        "data": "0x",
        "logIndex": 115,
        "blockHash": "0x0628a554fb8cab8fcd957229fa3ef52020df440f6fddfdeb76caa2827587ea84"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 10163330,
        "transactionHash": "0x2a4cff019a82c28d28ab89676bad3e3dc7e3e2c959a2f1d872f50c5bf9ca32b1",
        "address": "0x5C2eB1733A4C15321Cb1c6F0f20f0A840db3E540",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x6a4b509b5f306a69ec99e97ff6b166daad9c0a3dfce739a6d67ad1c57143a6b2",
          "0x00000000000000000000000098ad774fc109787e50ad2ae1bda2fdf855b6f6cc",
          "0x000000000000000000000000d1119ecc85f37f349f84bfa8811565e71581140f"
        ],
        "data": "0x",
        "logIndex": 116,
        "blockHash": "0x0628a554fb8cab8fcd957229fa3ef52020df440f6fddfdeb76caa2827587ea84"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 10163330,
        "transactionHash": "0x2a4cff019a82c28d28ab89676bad3e3dc7e3e2c959a2f1d872f50c5bf9ca32b1",
        "address": "0x5C2eB1733A4C15321Cb1c6F0f20f0A840db3E540",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x6a4b509b5f306a69ec99e97ff6b166daad9c0a3dfce739a6d67ad1c57143a6b2",
          "0x000000000000000000000000cbc16f59968b3b92c1cc4c8215ece339aca96040",
          "0x000000000000000000000000d1119ecc85f37f349f84bfa8811565e71581140f"
        ],
        "data": "0x",
        "logIndex": 117,
        "blockHash": "0x0628a554fb8cab8fcd957229fa3ef52020df440f6fddfdeb76caa2827587ea84"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 10163330,
        "transactionHash": "0x2a4cff019a82c28d28ab89676bad3e3dc7e3e2c959a2f1d872f50c5bf9ca32b1",
        "address": "0x5C2eB1733A4C15321Cb1c6F0f20f0A840db3E540",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x6a4b509b5f306a69ec99e97ff6b166daad9c0a3dfce739a6d67ad1c57143a6b2",
          "0x000000000000000000000000dbcf7f6441797e5351d300b2b20d8a754b2a888f",
          "0x000000000000000000000000d1119ecc85f37f349f84bfa8811565e71581140f"
        ],
        "data": "0x",
        "logIndex": 118,
        "blockHash": "0x0628a554fb8cab8fcd957229fa3ef52020df440f6fddfdeb76caa2827587ea84"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 10163330,
        "transactionHash": "0x2a4cff019a82c28d28ab89676bad3e3dc7e3e2c959a2f1d872f50c5bf9ca32b1",
        "address": "0x5C2eB1733A4C15321Cb1c6F0f20f0A840db3E540",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x6a4b509b5f306a69ec99e97ff6b166daad9c0a3dfce739a6d67ad1c57143a6b2",
          "0x000000000000000000000000748d47be167bc97e4ba80c8c421fa24c79a49fbe",
          "0x000000000000000000000000d1119ecc85f37f349f84bfa8811565e71581140f"
        ],
        "data": "0x",
        "logIndex": 119,
        "blockHash": "0x0628a554fb8cab8fcd957229fa3ef52020df440f6fddfdeb76caa2827587ea84"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 10163330,
        "transactionHash": "0x2a4cff019a82c28d28ab89676bad3e3dc7e3e2c959a2f1d872f50c5bf9ca32b1",
        "address": "0x5C2eB1733A4C15321Cb1c6F0f20f0A840db3E540",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x6a4b509b5f306a69ec99e97ff6b166daad9c0a3dfce739a6d67ad1c57143a6b2",
          "0x0000000000000000000000000e2126f99134af90aa43149387ec252bfc8fba0d",
          "0x000000000000000000000000d1119ecc85f37f349f84bfa8811565e71581140f"
        ],
        "data": "0x",
        "logIndex": 120,
        "blockHash": "0x0628a554fb8cab8fcd957229fa3ef52020df440f6fddfdeb76caa2827587ea84"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 10163330,
        "transactionHash": "0x2a4cff019a82c28d28ab89676bad3e3dc7e3e2c959a2f1d872f50c5bf9ca32b1",
        "address": "0x5C2eB1733A4C15321Cb1c6F0f20f0A840db3E540",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x6a4b509b5f306a69ec99e97ff6b166daad9c0a3dfce739a6d67ad1c57143a6b2",
          "0x00000000000000000000000031e1cf8a99c1d89b1d99b047565dc2475f9fe269",
          "0x000000000000000000000000d1119ecc85f37f349f84bfa8811565e71581140f"
        ],
        "data": "0x",
        "logIndex": 121,
        "blockHash": "0x0628a554fb8cab8fcd957229fa3ef52020df440f6fddfdeb76caa2827587ea84"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 10163330,
        "transactionHash": "0x2a4cff019a82c28d28ab89676bad3e3dc7e3e2c959a2f1d872f50c5bf9ca32b1",
        "address": "0x5C2eB1733A4C15321Cb1c6F0f20f0A840db3E540",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x6a4b509b5f306a69ec99e97ff6b166daad9c0a3dfce739a6d67ad1c57143a6b2",
          "0x00000000000000000000000042647285714407c7e4664be52e3a4ab38a2a7ef1",
          "0x000000000000000000000000d1119ecc85f37f349f84bfa8811565e71581140f"
        ],
        "data": "0x",
        "logIndex": 122,
        "blockHash": "0x0628a554fb8cab8fcd957229fa3ef52020df440f6fddfdeb76caa2827587ea84"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 10163330,
        "transactionHash": "0x2a4cff019a82c28d28ab89676bad3e3dc7e3e2c959a2f1d872f50c5bf9ca32b1",
        "address": "0x5C2eB1733A4C15321Cb1c6F0f20f0A840db3E540",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x6a4b509b5f306a69ec99e97ff6b166daad9c0a3dfce739a6d67ad1c57143a6b2",
          "0x000000000000000000000000df8d7ae76c468483bd93e2c1d24d73504bb30962",
          "0x000000000000000000000000d1119ecc85f37f349f84bfa8811565e71581140f"
        ],
        "data": "0x",
        "logIndex": 123,
        "blockHash": "0x0628a554fb8cab8fcd957229fa3ef52020df440f6fddfdeb76caa2827587ea84"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 10163330,
        "transactionHash": "0x2a4cff019a82c28d28ab89676bad3e3dc7e3e2c959a2f1d872f50c5bf9ca32b1",
        "address": "0x5C2eB1733A4C15321Cb1c6F0f20f0A840db3E540",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x6a4b509b5f306a69ec99e97ff6b166daad9c0a3dfce739a6d67ad1c57143a6b2",
          "0x000000000000000000000000dc0c2d971bdab9beb3d8436ffe08494d40c0dbfd",
          "0x000000000000000000000000d1119ecc85f37f349f84bfa8811565e71581140f"
        ],
        "data": "0x",
        "logIndex": 124,
        "blockHash": "0x0628a554fb8cab8fcd957229fa3ef52020df440f6fddfdeb76caa2827587ea84"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 10163330,
        "transactionHash": "0x2a4cff019a82c28d28ab89676bad3e3dc7e3e2c959a2f1d872f50c5bf9ca32b1",
        "address": "0x5C2eB1733A4C15321Cb1c6F0f20f0A840db3E540",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x6a4b509b5f306a69ec99e97ff6b166daad9c0a3dfce739a6d67ad1c57143a6b2",
          "0x000000000000000000000000eaef7e5f5c1212f4bf7953c4b8c66debe81b9248",
          "0x000000000000000000000000d1119ecc85f37f349f84bfa8811565e71581140f"
        ],
        "data": "0x",
        "logIndex": 125,
        "blockHash": "0x0628a554fb8cab8fcd957229fa3ef52020df440f6fddfdeb76caa2827587ea84"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 10163330,
        "transactionHash": "0x2a4cff019a82c28d28ab89676bad3e3dc7e3e2c959a2f1d872f50c5bf9ca32b1",
        "address": "0x5C2eB1733A4C15321Cb1c6F0f20f0A840db3E540",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x6a4b509b5f306a69ec99e97ff6b166daad9c0a3dfce739a6d67ad1c57143a6b2",
          "0x00000000000000000000000058a4007fa212170bb539dd5a860cb5fc49031ddf",
          "0x000000000000000000000000d1119ecc85f37f349f84bfa8811565e71581140f"
        ],
        "data": "0x",
        "logIndex": 126,
        "blockHash": "0x0628a554fb8cab8fcd957229fa3ef52020df440f6fddfdeb76caa2827587ea84"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 10163330,
        "transactionHash": "0x2a4cff019a82c28d28ab89676bad3e3dc7e3e2c959a2f1d872f50c5bf9ca32b1",
        "address": "0x5C2eB1733A4C15321Cb1c6F0f20f0A840db3E540",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x6a4b509b5f306a69ec99e97ff6b166daad9c0a3dfce739a6d67ad1c57143a6b2",
          "0x0000000000000000000000009db170d5214cc654ef7423025efc14ef21436981",
          "0x000000000000000000000000d1119ecc85f37f349f84bfa8811565e71581140f"
        ],
        "data": "0x",
        "logIndex": 127,
        "blockHash": "0x0628a554fb8cab8fcd957229fa3ef52020df440f6fddfdeb76caa2827587ea84"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 10163330,
        "transactionHash": "0x2a4cff019a82c28d28ab89676bad3e3dc7e3e2c959a2f1d872f50c5bf9ca32b1",
        "address": "0x5C2eB1733A4C15321Cb1c6F0f20f0A840db3E540",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x6a4b509b5f306a69ec99e97ff6b166daad9c0a3dfce739a6d67ad1c57143a6b2",
          "0x00000000000000000000000009a089f8bf325d4ea776f4042abcc2e2ad37a713",
          "0x000000000000000000000000d1119ecc85f37f349f84bfa8811565e71581140f"
        ],
        "data": "0x",
        "logIndex": 128,
        "blockHash": "0x0628a554fb8cab8fcd957229fa3ef52020df440f6fddfdeb76caa2827587ea84"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 10163330,
        "transactionHash": "0x2a4cff019a82c28d28ab89676bad3e3dc7e3e2c959a2f1d872f50c5bf9ca32b1",
        "address": "0x5C2eB1733A4C15321Cb1c6F0f20f0A840db3E540",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x6a4b509b5f306a69ec99e97ff6b166daad9c0a3dfce739a6d67ad1c57143a6b2",
          "0x000000000000000000000000ce0d0a205175200cff87afa13d30f1d6ea4abb90",
          "0x000000000000000000000000d1119ecc85f37f349f84bfa8811565e71581140f"
        ],
        "data": "0x",
        "logIndex": 129,
        "blockHash": "0x0628a554fb8cab8fcd957229fa3ef52020df440f6fddfdeb76caa2827587ea84"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 10163330,
        "transactionHash": "0x2a4cff019a82c28d28ab89676bad3e3dc7e3e2c959a2f1d872f50c5bf9ca32b1",
        "address": "0x5C2eB1733A4C15321Cb1c6F0f20f0A840db3E540",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x6a4b509b5f306a69ec99e97ff6b166daad9c0a3dfce739a6d67ad1c57143a6b2",
          "0x0000000000000000000000005dd657ab879d97641f09aa0fce4492d74dac626e",
          "0x000000000000000000000000d1119ecc85f37f349f84bfa8811565e71581140f"
        ],
        "data": "0x",
        "logIndex": 130,
        "blockHash": "0x0628a554fb8cab8fcd957229fa3ef52020df440f6fddfdeb76caa2827587ea84"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 10163330,
        "transactionHash": "0x2a4cff019a82c28d28ab89676bad3e3dc7e3e2c959a2f1d872f50c5bf9ca32b1",
        "address": "0x5C2eB1733A4C15321Cb1c6F0f20f0A840db3E540",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x6a4b509b5f306a69ec99e97ff6b166daad9c0a3dfce739a6d67ad1c57143a6b2",
          "0x0000000000000000000000005be4f39bfbca1123a00b34f42eb997cde8992fc8",
          "0x000000000000000000000000d1119ecc85f37f349f84bfa8811565e71581140f"
        ],
        "data": "0x",
        "logIndex": 131,
        "blockHash": "0x0628a554fb8cab8fcd957229fa3ef52020df440f6fddfdeb76caa2827587ea84"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 10163330,
        "transactionHash": "0x2a4cff019a82c28d28ab89676bad3e3dc7e3e2c959a2f1d872f50c5bf9ca32b1",
        "address": "0x5C2eB1733A4C15321Cb1c6F0f20f0A840db3E540",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x6a4b509b5f306a69ec99e97ff6b166daad9c0a3dfce739a6d67ad1c57143a6b2",
          "0x00000000000000000000000061a13cbd1af590ce296c0c524ea3340062ac9380",
          "0x000000000000000000000000d1119ecc85f37f349f84bfa8811565e71581140f"
        ],
        "data": "0x",
        "logIndex": 132,
        "blockHash": "0x0628a554fb8cab8fcd957229fa3ef52020df440f6fddfdeb76caa2827587ea84"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 10163330,
        "transactionHash": "0x2a4cff019a82c28d28ab89676bad3e3dc7e3e2c959a2f1d872f50c5bf9ca32b1",
        "address": "0x5C2eB1733A4C15321Cb1c6F0f20f0A840db3E540",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x6a4b509b5f306a69ec99e97ff6b166daad9c0a3dfce739a6d67ad1c57143a6b2",
          "0x000000000000000000000000af9781f8ad73b4cd0ac06c2124c9e31a6e725c0a",
          "0x000000000000000000000000d1119ecc85f37f349f84bfa8811565e71581140f"
        ],
        "data": "0x",
        "logIndex": 133,
        "blockHash": "0x0628a554fb8cab8fcd957229fa3ef52020df440f6fddfdeb76caa2827587ea84"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 10163330,
        "transactionHash": "0x2a4cff019a82c28d28ab89676bad3e3dc7e3e2c959a2f1d872f50c5bf9ca32b1",
        "address": "0x5C2eB1733A4C15321Cb1c6F0f20f0A840db3E540",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x6a4b509b5f306a69ec99e97ff6b166daad9c0a3dfce739a6d67ad1c57143a6b2",
          "0x000000000000000000000000fa8be98c63c52c7216dd3083119ff53b5c7836fb",
          "0x000000000000000000000000d1119ecc85f37f349f84bfa8811565e71581140f"
        ],
        "data": "0x",
        "logIndex": 134,
        "blockHash": "0x0628a554fb8cab8fcd957229fa3ef52020df440f6fddfdeb76caa2827587ea84"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 10163330,
        "transactionHash": "0x2a4cff019a82c28d28ab89676bad3e3dc7e3e2c959a2f1d872f50c5bf9ca32b1",
        "address": "0x5C2eB1733A4C15321Cb1c6F0f20f0A840db3E540",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x6a4b509b5f306a69ec99e97ff6b166daad9c0a3dfce739a6d67ad1c57143a6b2",
          "0x000000000000000000000000dd0a34a0190d57a7642e18903f41f602ac308816",
          "0x000000000000000000000000d1119ecc85f37f349f84bfa8811565e71581140f"
        ],
        "data": "0x",
        "logIndex": 135,
        "blockHash": "0x0628a554fb8cab8fcd957229fa3ef52020df440f6fddfdeb76caa2827587ea84"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 10163330,
        "transactionHash": "0x2a4cff019a82c28d28ab89676bad3e3dc7e3e2c959a2f1d872f50c5bf9ca32b1",
        "address": "0x5C2eB1733A4C15321Cb1c6F0f20f0A840db3E540",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x6a4b509b5f306a69ec99e97ff6b166daad9c0a3dfce739a6d67ad1c57143a6b2",
          "0x00000000000000000000000099dd9b625e3d5d83dceddb5ef7f8a3174123c006",
          "0x000000000000000000000000d1119ecc85f37f349f84bfa8811565e71581140f"
        ],
        "data": "0x",
        "logIndex": 136,
        "blockHash": "0x0628a554fb8cab8fcd957229fa3ef52020df440f6fddfdeb76caa2827587ea84"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 10163330,
        "transactionHash": "0x2a4cff019a82c28d28ab89676bad3e3dc7e3e2c959a2f1d872f50c5bf9ca32b1",
        "address": "0x5C2eB1733A4C15321Cb1c6F0f20f0A840db3E540",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x6a4b509b5f306a69ec99e97ff6b166daad9c0a3dfce739a6d67ad1c57143a6b2",
          "0x000000000000000000000000d34f559b2602c5b9e0cd9e1f54caec0746bc4fbf",
          "0x000000000000000000000000d1119ecc85f37f349f84bfa8811565e71581140f"
        ],
        "data": "0x",
        "logIndex": 137,
        "blockHash": "0x0628a554fb8cab8fcd957229fa3ef52020df440f6fddfdeb76caa2827587ea84"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 10163330,
        "transactionHash": "0x2a4cff019a82c28d28ab89676bad3e3dc7e3e2c959a2f1d872f50c5bf9ca32b1",
        "address": "0x5C2eB1733A4C15321Cb1c6F0f20f0A840db3E540",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x6a4b509b5f306a69ec99e97ff6b166daad9c0a3dfce739a6d67ad1c57143a6b2",
          "0x000000000000000000000000c5224a994dba1fb1edb8facc372658f8a934b35f",
          "0x000000000000000000000000d1119ecc85f37f349f84bfa8811565e71581140f"
        ],
        "data": "0x",
        "logIndex": 138,
        "blockHash": "0x0628a554fb8cab8fcd957229fa3ef52020df440f6fddfdeb76caa2827587ea84"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 10163330,
        "transactionHash": "0x2a4cff019a82c28d28ab89676bad3e3dc7e3e2c959a2f1d872f50c5bf9ca32b1",
        "address": "0x5C2eB1733A4C15321Cb1c6F0f20f0A840db3E540",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x6a4b509b5f306a69ec99e97ff6b166daad9c0a3dfce739a6d67ad1c57143a6b2",
          "0x0000000000000000000000003e5e4ad7207eb68929b3f2f643eddcdc548013d5",
          "0x000000000000000000000000d1119ecc85f37f349f84bfa8811565e71581140f"
        ],
        "data": "0x",
        "logIndex": 139,
        "blockHash": "0x0628a554fb8cab8fcd957229fa3ef52020df440f6fddfdeb76caa2827587ea84"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 10163330,
        "transactionHash": "0x2a4cff019a82c28d28ab89676bad3e3dc7e3e2c959a2f1d872f50c5bf9ca32b1",
        "address": "0x5C2eB1733A4C15321Cb1c6F0f20f0A840db3E540",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x6a4b509b5f306a69ec99e97ff6b166daad9c0a3dfce739a6d67ad1c57143a6b2",
          "0x0000000000000000000000007238135f989b5304af8169de483aabe9850dc74b",
          "0x000000000000000000000000d1119ecc85f37f349f84bfa8811565e71581140f"
        ],
        "data": "0x",
        "logIndex": 140,
        "blockHash": "0x0628a554fb8cab8fcd957229fa3ef52020df440f6fddfdeb76caa2827587ea84"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 10163330,
        "transactionHash": "0x2a4cff019a82c28d28ab89676bad3e3dc7e3e2c959a2f1d872f50c5bf9ca32b1",
        "address": "0x5C2eB1733A4C15321Cb1c6F0f20f0A840db3E540",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x6a4b509b5f306a69ec99e97ff6b166daad9c0a3dfce739a6d67ad1c57143a6b2",
          "0x000000000000000000000000009fc4a83b95819bb68dceb620c2492fcd5d0932",
          "0x000000000000000000000000d1119ecc85f37f349f84bfa8811565e71581140f"
        ],
        "data": "0x",
        "logIndex": 141,
        "blockHash": "0x0628a554fb8cab8fcd957229fa3ef52020df440f6fddfdeb76caa2827587ea84"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 10163330,
        "transactionHash": "0x2a4cff019a82c28d28ab89676bad3e3dc7e3e2c959a2f1d872f50c5bf9ca32b1",
        "address": "0x5C2eB1733A4C15321Cb1c6F0f20f0A840db3E540",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x6a4b509b5f306a69ec99e97ff6b166daad9c0a3dfce739a6d67ad1c57143a6b2",
          "0x0000000000000000000000008046cf7315549cf87608eb3f2ff0a6e20888e010",
          "0x000000000000000000000000d1119ecc85f37f349f84bfa8811565e71581140f"
        ],
        "data": "0x",
        "logIndex": 142,
        "blockHash": "0x0628a554fb8cab8fcd957229fa3ef52020df440f6fddfdeb76caa2827587ea84"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 10163330,
        "transactionHash": "0x2a4cff019a82c28d28ab89676bad3e3dc7e3e2c959a2f1d872f50c5bf9ca32b1",
        "address": "0x5C2eB1733A4C15321Cb1c6F0f20f0A840db3E540",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x6a4b509b5f306a69ec99e97ff6b166daad9c0a3dfce739a6d67ad1c57143a6b2",
          "0x000000000000000000000000e855cca7e2b0d3e3682153deab2b27a676551bb3",
          "0x000000000000000000000000d1119ecc85f37f349f84bfa8811565e71581140f"
        ],
        "data": "0x",
        "logIndex": 143,
        "blockHash": "0x0628a554fb8cab8fcd957229fa3ef52020df440f6fddfdeb76caa2827587ea84"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 10163330,
        "transactionHash": "0x2a4cff019a82c28d28ab89676bad3e3dc7e3e2c959a2f1d872f50c5bf9ca32b1",
        "address": "0x5C2eB1733A4C15321Cb1c6F0f20f0A840db3E540",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x6a4b509b5f306a69ec99e97ff6b166daad9c0a3dfce739a6d67ad1c57143a6b2",
          "0x000000000000000000000000305bcaa6851c3a29fcbe47a44f7aafc6465addf8",
          "0x000000000000000000000000d1119ecc85f37f349f84bfa8811565e71581140f"
        ],
        "data": "0x",
        "logIndex": 144,
        "blockHash": "0x0628a554fb8cab8fcd957229fa3ef52020df440f6fddfdeb76caa2827587ea84"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 10163330,
        "transactionHash": "0x2a4cff019a82c28d28ab89676bad3e3dc7e3e2c959a2f1d872f50c5bf9ca32b1",
        "address": "0x5C2eB1733A4C15321Cb1c6F0f20f0A840db3E540",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x6a4b509b5f306a69ec99e97ff6b166daad9c0a3dfce739a6d67ad1c57143a6b2",
          "0x000000000000000000000000611b15330d927ef98a01be58f1805008caff46b4",
          "0x000000000000000000000000d1119ecc85f37f349f84bfa8811565e71581140f"
        ],
        "data": "0x",
        "logIndex": 145,
        "blockHash": "0x0628a554fb8cab8fcd957229fa3ef52020df440f6fddfdeb76caa2827587ea84"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 10163330,
        "transactionHash": "0x2a4cff019a82c28d28ab89676bad3e3dc7e3e2c959a2f1d872f50c5bf9ca32b1",
        "address": "0x5C2eB1733A4C15321Cb1c6F0f20f0A840db3E540",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x6a4b509b5f306a69ec99e97ff6b166daad9c0a3dfce739a6d67ad1c57143a6b2",
          "0x000000000000000000000000277ae3be8d778697ff30e7cd7f7d945d0bbe88b7",
          "0x000000000000000000000000d1119ecc85f37f349f84bfa8811565e71581140f"
        ],
        "data": "0x",
        "logIndex": 146,
        "blockHash": "0x0628a554fb8cab8fcd957229fa3ef52020df440f6fddfdeb76caa2827587ea84"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 10163330,
        "transactionHash": "0x2a4cff019a82c28d28ab89676bad3e3dc7e3e2c959a2f1d872f50c5bf9ca32b1",
        "address": "0x5C2eB1733A4C15321Cb1c6F0f20f0A840db3E540",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x6a4b509b5f306a69ec99e97ff6b166daad9c0a3dfce739a6d67ad1c57143a6b2",
          "0x0000000000000000000000004bb0a135503cb32007732e3758f5bde46e631602",
          "0x000000000000000000000000d1119ecc85f37f349f84bfa8811565e71581140f"
        ],
        "data": "0x",
        "logIndex": 147,
        "blockHash": "0x0628a554fb8cab8fcd957229fa3ef52020df440f6fddfdeb76caa2827587ea84"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 10163330,
        "transactionHash": "0x2a4cff019a82c28d28ab89676bad3e3dc7e3e2c959a2f1d872f50c5bf9ca32b1",
        "address": "0x5C2eB1733A4C15321Cb1c6F0f20f0A840db3E540",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x6a4b509b5f306a69ec99e97ff6b166daad9c0a3dfce739a6d67ad1c57143a6b2",
          "0x000000000000000000000000106a3b778fa518c0aa21ba459d35a4f61711575a",
          "0x000000000000000000000000d1119ecc85f37f349f84bfa8811565e71581140f"
        ],
        "data": "0x",
        "logIndex": 148,
        "blockHash": "0x0628a554fb8cab8fcd957229fa3ef52020df440f6fddfdeb76caa2827587ea84"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 10163330,
        "transactionHash": "0x2a4cff019a82c28d28ab89676bad3e3dc7e3e2c959a2f1d872f50c5bf9ca32b1",
        "address": "0x5C2eB1733A4C15321Cb1c6F0f20f0A840db3E540",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x6a4b509b5f306a69ec99e97ff6b166daad9c0a3dfce739a6d67ad1c57143a6b2",
          "0x00000000000000000000000007ac123d23bf1fbd8d735ba89216edcecd2abd88",
          "0x000000000000000000000000d1119ecc85f37f349f84bfa8811565e71581140f"
        ],
        "data": "0x",
        "logIndex": 149,
        "blockHash": "0x0628a554fb8cab8fcd957229fa3ef52020df440f6fddfdeb76caa2827587ea84"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 10163330,
        "transactionHash": "0x2a4cff019a82c28d28ab89676bad3e3dc7e3e2c959a2f1d872f50c5bf9ca32b1",
        "address": "0x5C2eB1733A4C15321Cb1c6F0f20f0A840db3E540",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x6a4b509b5f306a69ec99e97ff6b166daad9c0a3dfce739a6d67ad1c57143a6b2",
          "0x0000000000000000000000007b35d77d05bc8883487535451aafe9735658c4f0",
          "0x000000000000000000000000d1119ecc85f37f349f84bfa8811565e71581140f"
        ],
        "data": "0x",
        "logIndex": 150,
        "blockHash": "0x0628a554fb8cab8fcd957229fa3ef52020df440f6fddfdeb76caa2827587ea84"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 10163330,
        "transactionHash": "0x2a4cff019a82c28d28ab89676bad3e3dc7e3e2c959a2f1d872f50c5bf9ca32b1",
        "address": "0x5C2eB1733A4C15321Cb1c6F0f20f0A840db3E540",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x6a4b509b5f306a69ec99e97ff6b166daad9c0a3dfce739a6d67ad1c57143a6b2",
          "0x0000000000000000000000001410263f1c6c20a26e24b7d5f749de0b3797621c",
          "0x000000000000000000000000d1119ecc85f37f349f84bfa8811565e71581140f"
        ],
        "data": "0x",
        "logIndex": 151,
        "blockHash": "0x0628a554fb8cab8fcd957229fa3ef52020df440f6fddfdeb76caa2827587ea84"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 10163330,
        "transactionHash": "0x2a4cff019a82c28d28ab89676bad3e3dc7e3e2c959a2f1d872f50c5bf9ca32b1",
        "address": "0x5C2eB1733A4C15321Cb1c6F0f20f0A840db3E540",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x6a4b509b5f306a69ec99e97ff6b166daad9c0a3dfce739a6d67ad1c57143a6b2",
          "0x000000000000000000000000261a5c4a4817d1b3a28f316bd5e9f397ccfa2f6e",
          "0x000000000000000000000000d1119ecc85f37f349f84bfa8811565e71581140f"
        ],
        "data": "0x",
        "logIndex": 152,
        "blockHash": "0x0628a554fb8cab8fcd957229fa3ef52020df440f6fddfdeb76caa2827587ea84"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 10163330,
        "transactionHash": "0x2a4cff019a82c28d28ab89676bad3e3dc7e3e2c959a2f1d872f50c5bf9ca32b1",
        "address": "0x5C2eB1733A4C15321Cb1c6F0f20f0A840db3E540",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x6a4b509b5f306a69ec99e97ff6b166daad9c0a3dfce739a6d67ad1c57143a6b2",
          "0x00000000000000000000000040b17fff5e9d4524cc8e2615198069e27459be9b",
          "0x000000000000000000000000d1119ecc85f37f349f84bfa8811565e71581140f"
        ],
        "data": "0x",
        "logIndex": 153,
        "blockHash": "0x0628a554fb8cab8fcd957229fa3ef52020df440f6fddfdeb76caa2827587ea84"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 10163330,
        "transactionHash": "0x2a4cff019a82c28d28ab89676bad3e3dc7e3e2c959a2f1d872f50c5bf9ca32b1",
        "address": "0x5C2eB1733A4C15321Cb1c6F0f20f0A840db3E540",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x6a4b509b5f306a69ec99e97ff6b166daad9c0a3dfce739a6d67ad1c57143a6b2",
          "0x000000000000000000000000d8c5765beb94d5b669ce5f216327eb8bf3733078",
          "0x000000000000000000000000d1119ecc85f37f349f84bfa8811565e71581140f"
        ],
        "data": "0x",
        "logIndex": 154,
        "blockHash": "0x0628a554fb8cab8fcd957229fa3ef52020df440f6fddfdeb76caa2827587ea84"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 10163330,
        "transactionHash": "0x2a4cff019a82c28d28ab89676bad3e3dc7e3e2c959a2f1d872f50c5bf9ca32b1",
        "address": "0x5C2eB1733A4C15321Cb1c6F0f20f0A840db3E540",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x6a4b509b5f306a69ec99e97ff6b166daad9c0a3dfce739a6d67ad1c57143a6b2",
          "0x00000000000000000000000092ad1567ceeea549037cf3f981f9bfed9d317806",
          "0x000000000000000000000000d1119ecc85f37f349f84bfa8811565e71581140f"
        ],
        "data": "0x",
        "logIndex": 155,
        "blockHash": "0x0628a554fb8cab8fcd957229fa3ef52020df440f6fddfdeb76caa2827587ea84"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 10163330,
        "transactionHash": "0x2a4cff019a82c28d28ab89676bad3e3dc7e3e2c959a2f1d872f50c5bf9ca32b1",
        "address": "0x5C2eB1733A4C15321Cb1c6F0f20f0A840db3E540",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x6a4b509b5f306a69ec99e97ff6b166daad9c0a3dfce739a6d67ad1c57143a6b2",
          "0x000000000000000000000000e813bb961b8040943b654b5879df29d9987ffcd0",
          "0x000000000000000000000000d1119ecc85f37f349f84bfa8811565e71581140f"
        ],
        "data": "0x",
        "logIndex": 156,
        "blockHash": "0x0628a554fb8cab8fcd957229fa3ef52020df440f6fddfdeb76caa2827587ea84"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 10163330,
        "transactionHash": "0x2a4cff019a82c28d28ab89676bad3e3dc7e3e2c959a2f1d872f50c5bf9ca32b1",
        "address": "0x5C2eB1733A4C15321Cb1c6F0f20f0A840db3E540",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x6a4b509b5f306a69ec99e97ff6b166daad9c0a3dfce739a6d67ad1c57143a6b2",
          "0x000000000000000000000000a0e268f89e641d92573d28fb82643e11972e051c",
          "0x000000000000000000000000d1119ecc85f37f349f84bfa8811565e71581140f"
        ],
        "data": "0x",
        "logIndex": 157,
        "blockHash": "0x0628a554fb8cab8fcd957229fa3ef52020df440f6fddfdeb76caa2827587ea84"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 10163330,
        "transactionHash": "0x2a4cff019a82c28d28ab89676bad3e3dc7e3e2c959a2f1d872f50c5bf9ca32b1",
        "address": "0x5C2eB1733A4C15321Cb1c6F0f20f0A840db3E540",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x6a4b509b5f306a69ec99e97ff6b166daad9c0a3dfce739a6d67ad1c57143a6b2",
          "0x0000000000000000000000009e2692de2ec83f72389f738b81f75ba7a37bf009",
          "0x000000000000000000000000d1119ecc85f37f349f84bfa8811565e71581140f"
        ],
        "data": "0x",
        "logIndex": 158,
        "blockHash": "0x0628a554fb8cab8fcd957229fa3ef52020df440f6fddfdeb76caa2827587ea84"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 10163330,
        "transactionHash": "0x2a4cff019a82c28d28ab89676bad3e3dc7e3e2c959a2f1d872f50c5bf9ca32b1",
        "address": "0x5C2eB1733A4C15321Cb1c6F0f20f0A840db3E540",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x6a4b509b5f306a69ec99e97ff6b166daad9c0a3dfce739a6d67ad1c57143a6b2",
          "0x000000000000000000000000a3b02b18225b77dd79558405875ef1dfc248a8aa",
          "0x000000000000000000000000d1119ecc85f37f349f84bfa8811565e71581140f"
        ],
        "data": "0x",
        "logIndex": 159,
        "blockHash": "0x0628a554fb8cab8fcd957229fa3ef52020df440f6fddfdeb76caa2827587ea84"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 10163330,
        "transactionHash": "0x2a4cff019a82c28d28ab89676bad3e3dc7e3e2c959a2f1d872f50c5bf9ca32b1",
        "address": "0x5C2eB1733A4C15321Cb1c6F0f20f0A840db3E540",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x6a4b509b5f306a69ec99e97ff6b166daad9c0a3dfce739a6d67ad1c57143a6b2",
          "0x000000000000000000000000e8e11370576322cdda86429dd82579ef7e52f72c",
          "0x000000000000000000000000d1119ecc85f37f349f84bfa8811565e71581140f"
        ],
        "data": "0x",
        "logIndex": 160,
        "blockHash": "0x0628a554fb8cab8fcd957229fa3ef52020df440f6fddfdeb76caa2827587ea84"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 10163330,
        "transactionHash": "0x2a4cff019a82c28d28ab89676bad3e3dc7e3e2c959a2f1d872f50c5bf9ca32b1",
        "address": "0x5C2eB1733A4C15321Cb1c6F0f20f0A840db3E540",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x6a4b509b5f306a69ec99e97ff6b166daad9c0a3dfce739a6d67ad1c57143a6b2",
          "0x00000000000000000000000083fcf4aa2682306009d5d354dbaf27443f441960",
          "0x000000000000000000000000d1119ecc85f37f349f84bfa8811565e71581140f"
        ],
        "data": "0x",
        "logIndex": 161,
        "blockHash": "0x0628a554fb8cab8fcd957229fa3ef52020df440f6fddfdeb76caa2827587ea84"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 10163330,
        "transactionHash": "0x2a4cff019a82c28d28ab89676bad3e3dc7e3e2c959a2f1d872f50c5bf9ca32b1",
        "address": "0x5C2eB1733A4C15321Cb1c6F0f20f0A840db3E540",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x6a4b509b5f306a69ec99e97ff6b166daad9c0a3dfce739a6d67ad1c57143a6b2",
          "0x0000000000000000000000007f87b77d9b36becf65d9341d6a1a46d04d42c335",
          "0x000000000000000000000000d1119ecc85f37f349f84bfa8811565e71581140f"
        ],
        "data": "0x",
        "logIndex": 162,
        "blockHash": "0x0628a554fb8cab8fcd957229fa3ef52020df440f6fddfdeb76caa2827587ea84"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 10163330,
        "transactionHash": "0x2a4cff019a82c28d28ab89676bad3e3dc7e3e2c959a2f1d872f50c5bf9ca32b1",
        "address": "0x5C2eB1733A4C15321Cb1c6F0f20f0A840db3E540",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x6a4b509b5f306a69ec99e97ff6b166daad9c0a3dfce739a6d67ad1c57143a6b2",
          "0x000000000000000000000000de61049559608bff7bbc4bdcbe286351af6e0c46",
          "0x000000000000000000000000d1119ecc85f37f349f84bfa8811565e71581140f"
        ],
        "data": "0x",
        "logIndex": 163,
        "blockHash": "0x0628a554fb8cab8fcd957229fa3ef52020df440f6fddfdeb76caa2827587ea84"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 10163330,
        "transactionHash": "0x2a4cff019a82c28d28ab89676bad3e3dc7e3e2c959a2f1d872f50c5bf9ca32b1",
        "address": "0x5C2eB1733A4C15321Cb1c6F0f20f0A840db3E540",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x6a4b509b5f306a69ec99e97ff6b166daad9c0a3dfce739a6d67ad1c57143a6b2",
          "0x000000000000000000000000922822f887cb2e31b205fc45cfa8a6b887b5286a",
          "0x000000000000000000000000d1119ecc85f37f349f84bfa8811565e71581140f"
        ],
        "data": "0x",
        "logIndex": 164,
        "blockHash": "0x0628a554fb8cab8fcd957229fa3ef52020df440f6fddfdeb76caa2827587ea84"
      }
    ],
    "blockNumber": 10163330,
    "cumulativeGasUsed": "19108844",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "Frame",
    "FRAME",
    "ipfs://QmfSqrM4qmm1wiVnoCyrtuewzk8CL733cfdyg4RrARPH79/",
    "https://musee-dezental.com/storefront",
    "0xb3dCcb4Cf7a26f6cf6B120Cf5A73875B7BBc655B",
    "0x01BE23585060835E02B77ef475b0Cc51aA1e0709",
    "0x2ed0feb3e7fd2022120aa84fab1945545a9f2ffc9076fd6156fa96eaff4c1311",
    "100000000000000000",
    "50",
    "1000"
  ],
  "solcInputHash": "f777997f4a93fac96999633fdd728cd6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_baseTokenUri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_contractUri\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_vrfCoordinator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_link\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_keyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"_rentalFeeNumerator\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"_rentalFeeDenominator\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"EtherWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_exhibitContractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_exhibitTokenId\",\"type\":\"uint256\"}],\"name\":\"ExhibitSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"LinkWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_requestId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"MintFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_requestId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"MintRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"RentalFeeCollectedFrom\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"_oldNumerator\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"_oldDenominator\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"_newNumerator\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"_newDenominator\",\"type\":\"int256\"}],\"name\":\"RentalFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_renter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_rentalExpiryBlock\",\"type\":\"uint256\"}],\"name\":\"RenterSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRESALE_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_rentalPrices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"clearExhibit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_exhibitor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_exhibitContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_exhibitTokenId\",\"type\":\"uint256\"}],\"name\":\"exhibitIsOwnedBy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Frame.Category\",\"name\":\"_category\",\"type\":\"uint8\"}],\"name\":\"getCategoryDetail\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getExhibit\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"internalType\":\"struct IExhibitionable.Exhibit\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getExhibitTokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getRentalPricePerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getRenter\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"renter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rentalExpiryBlock\",\"type\":\"uint256\"}],\"internalType\":\"struct IRentable.Rental\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersionNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"isCurrentlyRented\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Frame.Category\",\"name\":\"_category\",\"type\":\"uint8\"}],\"name\":\"mintFrame\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"randomness\",\"type\":\"uint256\"}],\"name\":\"rawFulfillRandomness\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rentalFeeDenominator\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rentalFeeNumerator\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"requestIdToCategory\",\"outputs\":[{\"internalType\":\"enum Frame.Category\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"requestIdToSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"requestIdToTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Frame.Category\",\"name\":\"_category\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startingTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_supply\",\"type\":\"uint256\"}],\"name\":\"setCategoryDetail\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_exhibitContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_exhibitTokenId\",\"type\":\"uint256\"}],\"name\":\"setExhibit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"_numerator\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"_denominator\",\"type\":\"int256\"}],\"name\":\"setRentalFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rentalPrice\",\"type\":\"uint256\"}],\"name\":\"setRentalPricePerBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_renter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_numberOfBlocks\",\"type\":\"uint256\"}],\"name\":\"setRenter\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Frame.SaleStatus\",\"name\":\"_status\",\"type\":\"uint8\"}],\"name\":\"setSaleStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"tokenIsRentedByAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdrawAllLink\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Aaron Boyd <https://github.com/aaronmboyd>\",\"details\":\"ERC-721 compatible token with multiple price categoriesAllows token holders to rent and exhibit other NFTs inside the FrameUses Chainlink VRF function to select minting within a price categoryImplements a basic pre-sale list using AccessControl roles configured during deployImplements ABDK math library for percentage-based fees arithmetic\",\"events\":{\"EtherWithdrawn(address,uint256)\":{\"params\":{\"_to\":\"Recipient of the ether\",\"_value\":\"Withdrawal amount in wei\"}},\"LinkWithdrawn(address,uint256)\":{\"params\":{\"_to\":\"Recipient of the LINK\",\"_value\":\"Withdrawal amount in wei\"}},\"MintFulfilled(bytes32,address,uint256)\":{\"params\":{\"_address\":\"Recipient address\",\"_requestId\":\"Request ID of the fulfillment\",\"_tokenId\":\"TokenID received\"}},\"MintRequest(bytes32,address)\":{\"params\":{\"_address\":\"Recipient address\",\"_requestId\":\"Request ID of the request\"}},\"RentalFeeCollectedFrom(uint256,address,uint256)\":{\"params\":{\"_from\":\"Frame owner\",\"_tokenId\":\"Token id that was rented\",\"_value\":\"Rental fee collected\"}},\"RentalFeeUpdated(int256,int256,int256,int256)\":{\"params\":{\"_newDenominator\":\"New denominator\",\"_newNumerator\":\"New numerator\",\"_oldDenominator\":\"Old denominator\",\"_oldNumerator\":\"Old numerator\"}}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"burn(uint256)\":{\"details\":\"Burns `tokenId`. See {ERC721-_burn}. Requirements: - The caller must own `tokenId` or be an approved operator.\"},\"clearExhibit(uint256)\":{\"params\":{\"_tokenId\":\"The token identifier of the exhibit\"}},\"constructor\":{\"details\":\"Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE` and `PAUSER_ROLE` to the account that deploys the contract\"},\"exhibitIsOwnedBy(address,address,uint256)\":{\"params\":{\"_exhibitContractAddress\":\"The new exhibit contract address\",\"_exhibitTokenId\":\"The token identifier of the exhibit\",\"_exhibitor\":\"Exhibitor claiming ownership\"}},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getCategoryDetail(uint8)\":{\"params\":{\"_category\":\"The Category to retrieve\"},\"returns\":{\"_0\":\"uint256 The price of the Category in wei\",\"_1\":\"uint256 The startingTokenId of the Category\",\"_2\":\"uint256 The total supply of the Category\",\"_3\":\"uint256 The remaining supply of the Category\"}},\"getExhibit(uint256)\":{\"params\":{\"_tokenId\":\"The token identifier of the exhibit\"}},\"getExhibitTokenURI(uint256)\":{\"params\":{\"_tokenId\":\"The token identifier of the exhibit\"}},\"getRentalPricePerBlock(uint256)\":{\"params\":{\"_tokenId\":\"Token identifier which is setting a renter\"}},\"getRenter(uint256)\":{\"params\":{\"_tokenId\":\"Token identifier which is setting a renter\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"getVersionNumber()\":{\"returns\":{\"_0\":\"The storage, major, minor, and patch version of the contract.\"}},\"grantRole(bytes32,address)\":{\"details\":\"Overload {grantRole} to track enumerable memberships\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"isCurrentlyRented(uint256)\":{\"params\":{\"_tokenId\":\"The token to check is rented\"}},\"mint(address)\":{\"details\":\"Creates a new token for `to`. Its token ID will be automatically assigned (and available on the emitted {IERC721-Transfer} event), and the token URI autogenerated based on the base URI passed at construction. See {ERC721-_mint}. Requirements: - the caller must have the `MINTER_ROLE`.\"},\"mintFrame(uint8)\":{\"params\":{\"_category\":\"Category to mint\"}},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"pause()\":{\"details\":\"Pauses all token transfers. See {ERC721Pausable} and {Pausable-_pause}. Requirements: - the caller must have the `PAUSER_ROLE`.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Overload {renounceRole} to track enumerable memberships\"},\"revokeRole(bytes32,address)\":{\"details\":\"Overload {revokeRole} to track enumerable memberships\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"setCategoryDetail(uint8,uint256,uint256,uint256)\":{\"params\":{\"_category\":\"Category to configure\",\"_price\":\"Price of this category\",\"_startingTokenId\":\"Starting token ID of the category\",\"_supply\":\"Number of tokens in this category\"}},\"setExhibit(uint256,address,uint256)\":{\"params\":{\"_exhibitContractAddress\":\"The new exhibit contract address\",\"_exhibitTokenId\":\"The token identifier of the exhibit\",\"_tokenId\":\"Token identifier which is setting an exhibit\"}},\"setRentalFee(int256,int256)\":{\"params\":{\"_denominator\":\"Rental fee denominator\",\"_numerator\":\"Rental fee numerator\"}},\"setRentalPricePerBlock(uint256,uint256)\":{\"params\":{\"_rentalPrice\":\"The rental price per block\",\"_tokenId\":\"Token identifier which is setting a renter\"}},\"setRenter(uint256,address,uint256)\":{\"params\":{\"_numberOfBlocks\":\"The number of blocks to rent for\",\"_renter\":\"The new renter address\",\"_tokenId\":\"Token identifier which is setting a renter\"}},\"setSaleStatus(uint8)\":{\"details\":\"Possible statuses are the enum SaleStatus\",\"params\":{\"_status\":\"Status to set\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenIsRentedByAddress(uint256,address)\":{\"params\":{\"_address\":\"The address to check if it's rented by\",\"_tokenId\":\"The token to check is rented\"}},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"unpause()\":{\"details\":\"Unpauses all token transfers. See {ERC721Pausable} and {Pausable-_unpause}. Requirements: - the caller must have the `PAUSER_ROLE`.\"},\"withdrawAllLink(address)\":{\"params\":{\"_to\":\"Address to receive all the LINK\"}},\"withdrawEther(address,uint256)\":{\"params\":{\"_to\":\"Address to receive the ether\"}}},\"stateVariables\":{\"PRESALE_ROLE\":{\"details\":\"Frame variablesFee: defaulted to 0.1 LINK on Rinkeby (varies by network), set during constructorKeyHash: must be set during constructor (varies by network)\"},\"categories\":{\"details\":\"Mappings\"},\"contractURI\":{\"details\":\"ERC721 variables\"},\"keyHash\":{\"details\":\"Chainlink variablesFee: defaulted to 0.1 LINK on Rinkeby (varies by network), set during constructorKeyHash: must be set during constructor (varies by network)\"}},\"title\":\"Musee Dezentral Frame NFT contract\",\"version\":1},\"userdoc\":{\"events\":{\"EtherWithdrawn(address,uint256)\":{\"notice\":\"Triggered when ether is withdrawn\"},\"ExhibitSet(uint256,address,uint256)\":{\"notice\":\"Triggered when a a new exhibit has been set\"},\"LinkWithdrawn(address,uint256)\":{\"notice\":\"Triggered when LINK is withdrawn\"},\"MintFulfilled(bytes32,address,uint256)\":{\"notice\":\"Triggered when a minting is fulfilled\"},\"MintRequest(bytes32,address)\":{\"notice\":\"Triggered when a minting is requested\"},\"RentalFeeCollectedFrom(uint256,address,uint256)\":{\"notice\":\"Triggered when rental fee accumulated in the contract\"},\"RentalFeeUpdated(int256,int256,int256,int256)\":{\"notice\":\"Triggered when the Rental Fee is updated\"},\"RenterSet(uint256,address,uint256)\":{\"notice\":\"Triggered when a renter has been set\"}},\"kind\":\"user\",\"methods\":{\"clearExhibit(uint256)\":{\"notice\":\"Remove the exhibit for a tokenId\"},\"constructor\":{\"notice\":\"Constructor\"},\"exhibitIsOwnedBy(address,address,uint256)\":{\"notice\":\"Return true if the exhibit is owned by exhibtor\"},\"getCategoryDetail(uint8)\":{\"notice\":\"Returns information about a Category\"},\"getExhibit(uint256)\":{\"notice\":\"Get the exhibit for a tokenId\"},\"getExhibitTokenURI(uint256)\":{\"notice\":\"Get the exhibit token URI for a tokenId\"},\"getRentalPricePerBlock(uint256)\":{\"notice\":\"Get the rental price per block for a tokenId\"},\"getRenter(uint256)\":{\"notice\":\"Get a renter for a tokenId\"},\"getVersionNumber()\":{\"notice\":\"Returns the storage, major, minor, and patch version of the contract.\"},\"isCurrentlyRented(uint256)\":{\"notice\":\"Checks if a token is currently rented by anyone\"},\"mintFrame(uint8)\":{\"notice\":\"Mint a Frame in a given Category\"},\"setCategoryDetail(uint8,uint256,uint256,uint256)\":{\"notice\":\"Configure a category\"},\"setExhibit(uint256,address,uint256)\":{\"notice\":\"Set an exhibit for a tokenId\"},\"setRentalFee(int256,int256)\":{\"notice\":\"Set rental fee\"},\"setRentalPricePerBlock(uint256,uint256)\":{\"notice\":\"Set the rental price per block for a tokenId\"},\"setRenter(uint256,address,uint256)\":{\"notice\":\"Set a renter for a tokenId\"},\"setSaleStatus(uint8)\":{\"notice\":\"Set the status of the sale\"},\"tokenIsRentedByAddress(uint256,address)\":{\"notice\":\"Checks if a token is currently rented by address\"},\"withdrawAllLink(address)\":{\"notice\":\"Withdraws all LINK token from this contract\"},\"withdrawEther(address,uint256)\":{\"notice\":\"Withdraws an amount of ether from this contract\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Frame.sol\":\"Frame\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/LinkTokenInterface.sol\\\";\\n\\nimport \\\"./VRFRequestIDBase.sol\\\";\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constuctor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator, _link) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash), and have told you the minimum LINK\\n * @dev price for VRF service. Make sure your contract has sufficient LINK, and\\n * @dev call requestRandomness(keyHash, fee, seed), where seed is the input you\\n * @dev want to generate randomness from.\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomness method.\\n *\\n * @dev The randomness argument to fulfillRandomness is the actual random value\\n * @dev generated from your seed.\\n *\\n * @dev The requestId argument is generated from the keyHash and the seed by\\n * @dev makeRequestId(keyHash, seed). If your contract could have concurrent\\n * @dev requests open, you can use the requestId to track which seed is\\n * @dev associated with which randomness. See VRFRequestIDBase.sol for more\\n * @dev details. (See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.)\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ. (Which is critical to making unpredictable randomness! See the\\n * @dev next section.)\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the ultimate input to the VRF is mixed with the block hash of the\\n * @dev block in which the request is made, user-provided seeds have no impact\\n * @dev on its economic security properties. They are only included for API\\n * @dev compatability with previous versions of this contract.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request.\\n */\\nabstract contract VRFConsumerBase is VRFRequestIDBase {\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBase expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomness the VRF output\\n   */\\n  function fulfillRandomness(\\n    bytes32 requestId,\\n    uint256 randomness\\n  )\\n    internal\\n    virtual;\\n\\n  /**\\n   * @dev In order to keep backwards compatibility we have kept the user\\n   * seed field around. We remove the use of it because given that the blockhash\\n   * enters later, it overrides whatever randomness the used seed provides.\\n   * Given that it adds no security, and can easily lead to misunderstandings,\\n   * we have removed it from usage and can now provide a simpler API.\\n   */\\n  uint256 constant private USER_SEED_PLACEHOLDER = 0;\\n\\n  /**\\n   * @notice requestRandomness initiates a request for VRF output given _seed\\n   *\\n   * @dev The fulfillRandomness method receives the output, once it's provided\\n   * @dev by the Oracle, and verified by the vrfCoordinator.\\n   *\\n   * @dev The _keyHash must already be registered with the VRFCoordinator, and\\n   * @dev the _fee must exceed the fee specified during registration of the\\n   * @dev _keyHash.\\n   *\\n   * @dev The _seed parameter is vestigial, and is kept only for API\\n   * @dev compatibility with older versions. It can't *hurt* to mix in some of\\n   * @dev your own randomness, here, but it's not necessary because the VRF\\n   * @dev oracle will mix the hash of the block containing your request into the\\n   * @dev VRF seed it ultimately uses.\\n   *\\n   * @param _keyHash ID of public key against which randomness is generated\\n   * @param _fee The amount of LINK to send with the request\\n   *\\n   * @return requestId unique ID for this request\\n   *\\n   * @dev The returned requestId can be used to distinguish responses to\\n   * @dev concurrent requests. It is passed as the first argument to\\n   * @dev fulfillRandomness.\\n   */\\n  function requestRandomness(\\n    bytes32 _keyHash,\\n    uint256 _fee\\n  )\\n    internal\\n    returns (\\n      bytes32 requestId\\n    )\\n  {\\n    LINK.transferAndCall(vrfCoordinator, _fee, abi.encode(_keyHash, USER_SEED_PLACEHOLDER));\\n    // This is the seed passed to VRFCoordinator. The oracle will mix this with\\n    // the hash of the block containing this request to obtain the seed/input\\n    // which is finally passed to the VRF cryptographic machinery.\\n    uint256 vRFSeed  = makeVRFInputSeed(_keyHash, USER_SEED_PLACEHOLDER, address(this), nonces[_keyHash]);\\n    // nonces[_keyHash] must stay in sync with\\n    // VRFCoordinator.nonces[_keyHash][this], which was incremented by the above\\n    // successful LINK.transferAndCall (in VRFCoordinator.randomnessRequest).\\n    // This provides protection against the user repeating their input seed,\\n    // which would result in a predictable/duplicate output, if multiple such\\n    // requests appeared in the same block.\\n    nonces[_keyHash] = nonces[_keyHash] + 1;\\n    return makeRequestId(_keyHash, vRFSeed);\\n  }\\n\\n  LinkTokenInterface immutable internal LINK;\\n  address immutable private vrfCoordinator;\\n\\n  // Nonces for each VRF key from which randomness has been requested.\\n  //\\n  // Must stay in sync with VRFCoordinator[_keyHash][this]\\n  mapping(bytes32 /* keyHash */ => uint256 /* nonce */) private nonces;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   * @param _link address of LINK token contract\\n   *\\n   * @dev https://docs.chain.link/docs/link-token-contracts\\n   */\\n  constructor(\\n    address _vrfCoordinator,\\n    address _link\\n  ) {\\n    vrfCoordinator = _vrfCoordinator;\\n    LINK = LinkTokenInterface(_link);\\n  }\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomness(\\n    bytes32 requestId,\\n    uint256 randomness\\n  )\\n    external\\n  {\\n    require(msg.sender == vrfCoordinator, \\\"Only VRFCoordinator can fulfill\\\");\\n    fulfillRandomness(requestId, randomness);\\n  }\\n}\\n\",\"keccak256\":\"0x991e49ee47043d6667887d7ed6ab5a0f8e4e5550f92b09b0d75c1fb1a473cd8d\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/VRFRequestIDBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract VRFRequestIDBase {\\n\\n  /**\\n   * @notice returns the seed which is actually input to the VRF coordinator\\n   *\\n   * @dev To prevent repetition of VRF output due to repetition of the\\n   * @dev user-supplied seed, that seed is combined in a hash with the\\n   * @dev user-specific nonce, and the address of the consuming contract. The\\n   * @dev risk of repetition is mostly mitigated by inclusion of a blockhash in\\n   * @dev the final seed, but the nonce does protect against repetition in\\n   * @dev requests which are included in a single block.\\n   *\\n   * @param _userSeed VRF seed input provided by user\\n   * @param _requester Address of the requesting contract\\n   * @param _nonce User-specific nonce at the time of the request\\n   */\\n  function makeVRFInputSeed(\\n    bytes32 _keyHash,\\n    uint256 _userSeed,\\n    address _requester,\\n    uint256 _nonce\\n  )\\n    internal\\n    pure\\n    returns (\\n      uint256\\n    )\\n  {\\n    return uint256(keccak256(abi.encode(_keyHash, _userSeed, _requester, _nonce)));\\n  }\\n\\n  /**\\n   * @notice Returns the id for this request\\n   * @param _keyHash The serviceAgreement ID to be used for this request\\n   * @param _vRFInputSeed The seed to be passed directly to the VRF\\n   * @return The id for this request\\n   *\\n   * @dev Note that _vRFInputSeed is not the seed passed by the consuming\\n   * @dev contract, but the one generated by makeVRFInputSeed\\n   */\\n  function makeRequestId(\\n    bytes32 _keyHash,\\n    uint256 _vRFInputSeed\\n  )\\n    internal\\n    pure\\n    returns (\\n      bytes32\\n    )\\n  {\\n    return keccak256(abi.encodePacked(_keyHash, _vRFInputSeed));\\n  }\\n}\",\"keccak256\":\"0x7c8dad07e6c6c9269d97fd1191ccf9c0f0068683f1f88003e688eef9373de0d9\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface LinkTokenInterface {\\n\\n  function allowance(\\n    address owner,\\n    address spender\\n  )\\n    external\\n    view\\n    returns (\\n      uint256 remaining\\n    );\\n\\n  function approve(\\n    address spender,\\n    uint256 value\\n  )\\n    external\\n    returns (\\n      bool success\\n    );\\n\\n  function balanceOf(\\n    address owner\\n  )\\n    external\\n    view\\n    returns (\\n      uint256 balance\\n    );\\n\\n  function decimals()\\n    external\\n    view\\n    returns (\\n      uint8 decimalPlaces\\n    );\\n\\n  function decreaseApproval(\\n    address spender,\\n    uint256 addedValue\\n  )\\n    external\\n    returns (\\n      bool success\\n    );\\n\\n  function increaseApproval(\\n    address spender,\\n    uint256 subtractedValue\\n  ) external;\\n\\n  function name()\\n    external\\n    view\\n    returns (\\n      string memory tokenName\\n    );\\n\\n  function symbol()\\n    external\\n    view\\n    returns (\\n      string memory tokenSymbol\\n    );\\n\\n  function totalSupply()\\n    external\\n    view\\n    returns (\\n      uint256 totalTokensIssued\\n    );\\n\\n  function transfer(\\n    address to,\\n    uint256 value\\n  )\\n    external\\n    returns (\\n      bool success\\n    );\\n\\n  function transferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  )\\n    external\\n    returns (\\n      bool success\\n    );\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  )\\n    external\\n    returns (\\n      bool success\\n    );\\n\\n}\\n\",\"keccak256\":\"0x50528c237386c55ff122d047f91b32be7abe24e9dfdc609de21cd605aae83b9a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x183481af1c40d2efb26b86f63d6fe9e22f24c87e436d60a69f261b38500e7cd6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerable.sol\\\";\\nimport \\\"./AccessControl.sol\\\";\\nimport \\\"../utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {grantRole} to track enumerable memberships\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override(AccessControl, IAccessControl) {\\n        super.grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {revokeRole} to track enumerable memberships\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override(AccessControl, IAccessControl) {\\n        super.revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev Overload {renounceRole} to track enumerable memberships\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override(AccessControl, IAccessControl) {\\n        super.renounceRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_setupRole} to track enumerable memberships\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual override {\\n        super._setupRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n}\\n\",\"keccak256\":\"0x313834fba9dbefee1df7717a5e3063ebf567d276e67bc925a03c7f8423f4c50e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xfe0edb09653ed10e8a1bfe03eb9b0ff06775666eee817a95bd3d0799f1ee2b44\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x6a9a31f278ee3ed0568ab7e3c09ecb72bf92f922475a274760b4c58f87f9ad0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xa35b1f2a670cd2a701a52c398032c9fed72df1909fe394d77ceacbf074e8937b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xfce1eb6398eae0e2b50251140866a70a3106193f101972c878bba1dbf44929ec\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x6ba0564f6970414d1166ee83127b834bbe7dbf699241a3005eb7ae64a2211975\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x7d2b8ba4b256bfcac347991b75242f9bc37f499c5236af50cf09d0b35943dc0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @title ERC721 Burnable Token\\n * @dev ERC721 Token that can be irreversibly burned (destroyed).\\n */\\nabstract contract ERC721Burnable is Context, ERC721 {\\n    /**\\n     * @dev Burns `tokenId`. See {ERC721-_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own `tokenId` or be an approved operator.\\n     */\\n    function burn(uint256 tokenId) public virtual {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721Burnable: caller is not owner nor approved\\\");\\n        _burn(tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0x7481c284b0ff5983d3f1784f0ceae1ec397f8c8938bc60552b19889cc057aee8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x41dc7bf7f69c668eb98aa078c5140a4d3c3b097124ee4b6058a649ca99688300\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"../../../security/Pausable.sol\\\";\\n\\n/**\\n * @dev ERC721 token with pausable token transfers, minting and burning.\\n *\\n * Useful for scenarios such as preventing trades until the end of an evaluation\\n * period, or having an emergency switch for freezing all token transfers in the\\n * event of a large bug.\\n */\\nabstract contract ERC721Pausable is ERC721, Pausable {\\n    /**\\n     * @dev See {ERC721-_beforeTokenTransfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - the contract must not be paused.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        require(!paused(), \\\"ERC721Pausable: token transfer while paused\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xe8f81ba5ba258c2a3ad5cf4c0bf6263c78e60f320bd0bc150c9de2445958c47b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa69205e5009601cf13be78b1e2f500e1e3b1d8012f22d966e63975273f602038\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xd32fb7f530a914b1083d10a6bed3a586f2451952fec04fe542bcc670a82f7ba5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/presets/ERC721PresetMinterPauserAutoId.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"../extensions/ERC721Enumerable.sol\\\";\\nimport \\\"../extensions/ERC721Burnable.sol\\\";\\nimport \\\"../extensions/ERC721Pausable.sol\\\";\\nimport \\\"../../../access/AccessControlEnumerable.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\nimport \\\"../../../utils/Counters.sol\\\";\\n\\n/**\\n * @dev {ERC721} token, including:\\n *\\n *  - ability for holders to burn (destroy) their tokens\\n *  - a minter role that allows for token minting (creation)\\n *  - a pauser role that allows to stop all token transfers\\n *  - token ID and URI autogeneration\\n *\\n * This contract uses {AccessControl} to lock permissioned functions using the\\n * different roles - head to its documentation for details.\\n *\\n * The account that deploys the contract will be granted the minter and pauser\\n * roles, as well as the default admin role, which will let it grant both minter\\n * and pauser roles to other accounts.\\n */\\ncontract ERC721PresetMinterPauserAutoId is\\n    Context,\\n    AccessControlEnumerable,\\n    ERC721Enumerable,\\n    ERC721Burnable,\\n    ERC721Pausable\\n{\\n    using Counters for Counters.Counter;\\n\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n\\n    Counters.Counter private _tokenIdTracker;\\n\\n    string private _baseTokenURI;\\n\\n    /**\\n     * @dev Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE` and `PAUSER_ROLE` to the\\n     * account that deploys the contract.\\n     *\\n     * Token URIs will be autogenerated based on `baseURI` and their token IDs.\\n     * See {ERC721-tokenURI}.\\n     */\\n    constructor(\\n        string memory name,\\n        string memory symbol,\\n        string memory baseTokenURI\\n    ) ERC721(name, symbol) {\\n        _baseTokenURI = baseTokenURI;\\n\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n\\n        _setupRole(MINTER_ROLE, _msgSender());\\n        _setupRole(PAUSER_ROLE, _msgSender());\\n    }\\n\\n    function _baseURI() internal view virtual override returns (string memory) {\\n        return _baseTokenURI;\\n    }\\n\\n    /**\\n     * @dev Creates a new token for `to`. Its token ID will be automatically\\n     * assigned (and available on the emitted {IERC721-Transfer} event), and the token\\n     * URI autogenerated based on the base URI passed at construction.\\n     *\\n     * See {ERC721-_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `MINTER_ROLE`.\\n     */\\n    function mint(address to) public virtual {\\n        require(hasRole(MINTER_ROLE, _msgSender()), \\\"ERC721PresetMinterPauserAutoId: must have minter role to mint\\\");\\n\\n        // We cannot just use balanceOf to create the new tokenId because tokens\\n        // can be burned (destroyed), so we need a separate counter.\\n        _mint(to, _tokenIdTracker.current());\\n        _tokenIdTracker.increment();\\n    }\\n\\n    /**\\n     * @dev Pauses all token transfers.\\n     *\\n     * See {ERC721Pausable} and {Pausable-_pause}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `PAUSER_ROLE`.\\n     */\\n    function pause() public virtual {\\n        require(hasRole(PAUSER_ROLE, _msgSender()), \\\"ERC721PresetMinterPauserAutoId: must have pauser role to pause\\\");\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev Unpauses all token transfers.\\n     *\\n     * See {ERC721Pausable} and {Pausable-_unpause}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `PAUSER_ROLE`.\\n     */\\n    function unpause() public virtual {\\n        require(hasRole(PAUSER_ROLE, _msgSender()), \\\"ERC721PresetMinterPauserAutoId: must have pauser role to unpause\\\");\\n        _unpause();\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override(ERC721, ERC721Enumerable, ERC721Pausable) {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(AccessControlEnumerable, ERC721, ERC721Enumerable)\\n        returns (bool)\\n    {\\n        return super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xe8d33b91c7eedd75d2bf76b67c63e0989e8e98ab08641af7026c55db7f853d95\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x78450f4e3b722cce467b21e285f72ce5eaf361e9ba9dd2241a413926246773cd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x3778dc944f4a696335878bad8beca60f38b7c79b7a0bd8ddbeb618bd502a95ae\",\"license\":\"MIT\"},\"contracts/Frame.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./abstract/Rentable.sol\\\";\\nimport \\\"./abstract/Exhibitionable.sol\\\";\\nimport \\\"./interface/IVersionedContract.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBase.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/presets/ERC721PresetMinterPauserAutoId.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"./lib/ABDKMath64x64.sol\\\";\\nimport \\\"./lib/AllowList.sol\\\";\\n\\n/**\\n * @title Musee Dezentral Frame NFT contract\\n *\\n * @dev   ERC-721 compatible token with multiple price categories\\n * @dev   Allows token holders to rent and exhibit other NFTs inside the Frame\\n * @dev   Uses Chainlink VRF function to select minting within a price category\\n * @dev   Implements a basic pre-sale list using AccessControl roles configured during deploy\\n * @dev   Implements ABDK math library for percentage-based fees arithmetic\\n *\\n * @author Aaron Boyd <https://github.com/aaronmboyd>\\n */\\ncontract Frame is\\n    IVersionedContract,\\n    ReentrancyGuard,\\n    Rentable,\\n    Exhibitionable,\\n    ERC721PresetMinterPauserAutoId,\\n    VRFConsumerBase\\n{\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    enum SaleStatus {\\n        OFF,\\n        PRESALE,\\n        MAINSALE\\n    }\\n\\n    enum Category {\\n        A,\\n        B,\\n        C,\\n        D,\\n        E,\\n        F,\\n        G,\\n        H,\\n        I,\\n        J,\\n        K\\n    }\\n    struct CategoryDetail {\\n        uint256 price;\\n        uint256 startingTokenId;\\n        uint256 supply;\\n        EnumerableSet.UintSet tokenIds;\\n    }\\n\\n    /**\\n     * @dev Mappings\\n     */\\n    mapping(Category => CategoryDetail) internal categories;\\n    mapping(bytes32 => address) public requestIdToSender;\\n    mapping(bytes32 => Category) public requestIdToCategory;\\n    mapping(bytes32 => uint256) public requestIdToTokenId;\\n\\n    /**\\n     * @dev Chainlink variables\\n     * @dev Fee: defaulted to 0.1 LINK on Rinkeby (varies by network), set during constructor\\n     * @dev KeyHash: must be set during constructor (varies by network)\\n     */\\n    bytes32 internal keyHash;\\n    uint256 internal fee = 0.1 * 10**18;\\n\\n    /**\\n     * @dev Frame variables\\n     * @dev Fee: defaulted to 0.1 LINK on Rinkeby (varies by network), set during constructor\\n     * @dev KeyHash: must be set during constructor (varies by network)\\n     */\\n    bytes32 public constant PRESALE_ROLE = keccak256(\\\"PRESALE_ROLE\\\");\\n    SaleStatus internal saleStatus = SaleStatus.OFF;\\n    int256 public rentalFeeNumerator = 50;\\n    int256 public rentalFeeDenominator = 1000;\\n\\n    /**\\n     * @dev ERC721 variables\\n     */\\n    string public contractURI;\\n\\n    /**\\n     * @notice Triggered when a minting is requested\\n     * @param _requestId      Request ID of the request\\n     * @param _address        Recipient address\\n     */\\n    event MintRequest(bytes32 indexed _requestId, address indexed _address);\\n\\n    /**\\n     * @notice Triggered when a minting is fulfilled\\n     * @param _requestId      Request ID of the fulfillment\\n     * @param _address        Recipient address\\n     * @param _tokenId        TokenID received\\n     */\\n    event MintFulfilled(\\n        bytes32 indexed _requestId,\\n        address indexed _address,\\n        uint256 indexed _tokenId\\n    );\\n\\n    /**\\n     * @notice Triggered when LINK is withdrawn\\n     * @param _to             Recipient of the LINK\\n     * @param _value          Withdrawal amount in wei\\n     */\\n    event LinkWithdrawn(address indexed _to, uint256 _value);\\n\\n    /**\\n     * @notice Triggered when ether is withdrawn\\n     * @param _to             Recipient of the ether\\n     * @param _value          Withdrawal amount in wei\\n     */\\n    event EtherWithdrawn(address indexed _to, uint256 _value);\\n\\n    /**\\n     * @notice Triggered when rental fee accumulated in the contract\\n     * @param _tokenId        Token id that was rented\\n     * @param _from           Frame owner\\n     * @param _value          Rental fee collected\\n     */\\n    event RentalFeeCollectedFrom(uint256 indexed _tokenId, address indexed _from, uint256 _value);\\n\\n    /**\\n     * @notice Triggered when the Rental Fee is updated\\n     * @param _oldNumerator   Old numerator\\n     * @param _oldDenominator Old denominator\\n     * @param _newNumerator   New numerator\\n     * @param _newDenominator New denominator\\n     */\\n    event RentalFeeUpdated(\\n        int256 _oldNumerator,\\n        int256 _oldDenominator,\\n        int256 _newNumerator,\\n        int256 _newDenominator\\n    );\\n\\n    /**\\n     * @notice Returns the storage, major, minor, and patch version of the contract.\\n     * @return The storage, major, minor, and patch version of the contract.\\n     */\\n    function getVersionNumber()\\n        external\\n        pure\\n        override\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        return (1, 0, 2, 1);\\n    }\\n\\n    /**\\n     *  @notice Enforces any sale is on\\n     */\\n    modifier mintingAvailable() {\\n        require(saleStatus != SaleStatus.OFF, \\\"Frame: Minting not available\\\");\\n        _;\\n    }\\n\\n    /**\\n     *  @notice Enforces a valid category\\n     */\\n    modifier validCategory(Category category) {\\n        require(category <= Category.K, \\\"Frame: Invalid Category\\\");\\n        require(category >= Category.A, \\\"Frame: Invalid Category\\\");\\n        _;\\n    }\\n\\n    /**\\n     *  @notice Enforces a tokenId exists\\n     */\\n    modifier tokenExists(uint256 _tokenId) {\\n        require(_exists(_tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Enforces an address should have the DEFAULT_ADMIN_ROLE (0x00) for the entire contract\\n     */\\n    modifier onlyOwner(address _address) {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, _address), \\\"Frame: Only owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Enforces a tokenId should be owned by an address\\n     */\\n    modifier tokenIsOwned(uint256 _tokenId, address _address) {\\n        require(_tokenIsOwned(_tokenId, _address), \\\"Frame: Not the Owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Enforces an Exhibit is owned by the user\\n     */\\n    modifier ownsExhibit(\\n        address _exhibitor,\\n        address _exhibitContractAddress,\\n        uint256 _exhibitTokenId\\n    ) {\\n        require(\\n            Exhibitionable(this).exhibitIsOwnedBy(\\n                _exhibitor,\\n                _exhibitContractAddress,\\n                _exhibitTokenId\\n            ),\\n            \\\"Frame: Exhibit not valid\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @notice Enforces a token is not currently rented\\n     */\\n    modifier tokenNotRented(uint256 _tokenId) {\\n        require(!_isCurrentlyRented(_tokenId), \\\"Frame: Token already rented\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Enforces a token has a rentalPricePerBlock configured\\n     */\\n    modifier rentalPriceSet(uint256 _tokenId) {\\n        require(Rentable(this).getRentalPricePerBlock(_tokenId) > 0, \\\"Frame: Rental price not set\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Constructor\\n     * @dev Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE` and `PAUSER_ROLE` to the account that deploys the contract\\n     */\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        string memory _baseTokenUri,\\n        string memory _contractUri,\\n        address _vrfCoordinator,\\n        address _link,\\n        bytes32 _keyHash,\\n        uint256 _fee,\\n        int256 _rentalFeeNumerator,\\n        int256 _rentalFeeDenominator\\n    )\\n        ERC721PresetMinterPauserAutoId(_name, _symbol, _baseTokenUri)\\n        VRFConsumerBase(_vrfCoordinator, _link)\\n    {\\n        // Used to generate a metadata location for the entire contract\\n        // commonly used on secondary marketplaces like OpenSea to display collection information\\n        contractURI = _contractUri;\\n\\n        // Used to requestRandomness from VRFConsumerBase\\n        fee = _fee;\\n        keyHash = _keyHash;\\n\\n        // Rental fee starting at 5%, adjustable\\n        rentalFeeNumerator = _rentalFeeNumerator;\\n        rentalFeeDenominator = _rentalFeeDenominator;\\n\\n        // Initialise allow list\\n        // Gas intensive on deploy but easier than sending 119 transactions\\n        address[119] memory allowList = AllowList.getAllowList();\\n        uint256 i;\\n        for(i = 0;i<allowList.length;i++){\\n            grantRole(PRESALE_ROLE, allowList[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev Frame functions\\n     */\\n\\n    /**\\n     * @notice Internal: simple ether transfer\\n     */\\n    function _transfer(address payable _to, uint256 _amount) internal {\\n        (bool success, ) = _to.call{value: _amount}(\\\"\\\");\\n        require(success, \\\"Frame: Failed to send ETH\\\");\\n    }\\n\\n    /**\\n     * @notice Internal: checks if a token is currently owned by address\\n     * @param _tokenId The token to check is owned\\n     * @param _address The address to check if it's owned by\\n     */\\n    function _tokenIsOwned(uint256 _tokenId, address _address) internal view returns (bool) {\\n        return _address == ownerOf(_tokenId);\\n    }\\n\\n    /**\\n     * @notice Returns information about a Category\\n     * @param _category The Category to retrieve\\n     * @return uint256 The price of the Category in wei\\n     * @return uint256 The startingTokenId of the Category\\n     * @return uint256 The total supply of the Category\\n     * @return uint256 The remaining supply of the Category\\n     */\\n    function getCategoryDetail(Category _category)\\n        public\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        CategoryDetail storage category = categories[_category];\\n        uint256 supplyRemaining = category.supply - category.tokenIds.length();\\n        return (category.price, category.startingTokenId, category.supply, supplyRemaining);\\n    }\\n\\n    /**\\n     * @dev Rentable implementation overrides\\n     */\\n\\n    /**\\n     * @inheritdoc Rentable\\n     */\\n    function setRenter(\\n        uint256 _tokenId,\\n        address _renter,\\n        uint256 _numberOfBlocks\\n    )\\n        external\\n        payable\\n        override\\n        tokenExists(_tokenId)\\n        tokenNotRented(_tokenId)\\n        rentalPriceSet(_tokenId)\\n        nonReentrant\\n    {\\n        // Calculate rent\\n        uint256 rentalCostPerBlock = _getRentalPricePerBlock(_tokenId);\\n        uint256 rentalCost = _numberOfBlocks * rentalCostPerBlock;\\n        require(msg.value == rentalCost, \\\"Frame: Incorrect payment\\\");\\n\\n        // Calculate rental fee\\n        int128 rentalFeeRatio = ABDKMath64x64.divi(rentalFeeNumerator, rentalFeeDenominator);\\n        uint256 rentalFeeAmount = ABDKMath64x64.mulu(rentalFeeRatio, rentalCost);\\n        address owner = ownerOf(_tokenId);\\n        emit RentalFeeCollectedFrom(_tokenId, owner, rentalFeeAmount);\\n\\n        // Calculate net amount to owner\\n        rentalCost = rentalCost - rentalFeeAmount;\\n\\n        // Send to owner (remainder remains in contract as fee)\\n        address payable tokenOwner = payable(owner);\\n        _transfer(tokenOwner, rentalCost);\\n\\n        // Rent\\n        _setRenter(_tokenId, _renter, _numberOfBlocks);\\n    }\\n\\n    /**\\n     * @inheritdoc Rentable\\n     */\\n    function setRentalPricePerBlock(uint256 _tokenId, uint256 _rentalPrice)\\n        external\\n        override\\n        tokenExists(_tokenId)\\n        tokenIsOwned(_tokenId, _msgSender())\\n    {\\n        _setRentalPricePerBlock(_tokenId, _rentalPrice);\\n    }\\n\\n    /**\\n     * @dev Internal: verify you are the owner or renter of a token\\n     */\\n    function _verifyOwnership(address _ownerOrRenter, uint256 _tokenId)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        if (Rentable(this).isCurrentlyRented(_tokenId)) {\\n            bool rented = _tokenIsRentedByAddress(_tokenId, _ownerOrRenter);\\n            require(rented, \\\"Frame: Not the Renter\\\");\\n            return rented;\\n        } else {\\n            bool owned = _tokenIsOwned(_tokenId, _ownerOrRenter);\\n            require(owned, \\\"Frame: Not the Owner\\\");\\n            return owned;\\n        }\\n    }\\n\\n    /**\\n     * @dev Exhibitionable implementation overrides\\n     */\\n\\n    /**\\n     * @inheritdoc Exhibitionable\\n     */\\n    function setExhibit(\\n        uint256 _tokenId,\\n        address _exhibitContractAddress,\\n        uint256 _exhibitTokenId\\n    )\\n        external\\n        override\\n        tokenExists(_tokenId)\\n        ownsExhibit(_msgSender(), _exhibitContractAddress, _exhibitTokenId)\\n        nonReentrant\\n    {\\n        _verifyOwnership(_msgSender(), _tokenId);\\n        _setExhibit(_tokenId, _exhibitContractAddress, _exhibitTokenId);\\n    }\\n\\n    /**\\n     * @inheritdoc Exhibitionable\\n     */\\n    function clearExhibit(uint256 _tokenId) external override tokenExists(_tokenId) nonReentrant {\\n        _verifyOwnership(_msgSender(), _tokenId);\\n        _clearExhibit(_tokenId);\\n    }\\n\\n    /**\\n     * @dev Frame\\n     */\\n\\n    /**\\n     * @notice Set rental fee\\n     * @param _numerator   Rental fee numerator\\n     * @param _denominator Rental fee denominator\\n     */\\n    function setRentalFee(int256 _numerator, int256 _denominator) external onlyOwner(_msgSender()) {\\n        int256 oldNumerator = rentalFeeNumerator;\\n        int256 oldDenominator = rentalFeeDenominator;\\n        rentalFeeNumerator = _numerator;\\n        rentalFeeDenominator = _denominator;\\n        emit RentalFeeUpdated(\\n            oldNumerator,\\n            oldDenominator,\\n            rentalFeeNumerator,\\n            rentalFeeDenominator\\n        );\\n    }\\n\\n    /**\\n     * @notice Configure a category\\n     * @param _category        Category to configure\\n     * @param _price           Price of this category\\n     * @param _startingTokenId Starting token ID of the category\\n     * @param _supply          Number of tokens in this category\\n     */\\n    function setCategoryDetail(\\n        Category _category,\\n        uint256 _price,\\n        uint256 _startingTokenId,\\n        uint256 _supply\\n    ) external onlyOwner(_msgSender()) validCategory(_category) {\\n        CategoryDetail storage category = categories[_category];\\n        category.price = _price;\\n        category.startingTokenId = _startingTokenId;\\n        category.supply = _supply;\\n\\n        uint256 j;\\n        for (j = _startingTokenId; j < (_startingTokenId + _supply); j++) {\\n            category.tokenIds.add(j);\\n        }\\n    }\\n\\n    /**\\n     * @notice Set the status of the sale\\n     * @dev    Possible statuses are the enum SaleStatus\\n     * @param _status          Status to set\\n     */\\n    function setSaleStatus(SaleStatus _status) external onlyOwner(_msgSender()) {\\n        saleStatus = _status;\\n    }\\n\\n    /**\\n     * @notice Mint a Frame in a given Category\\n     * @param _category   Category to mint\\n     */\\n    function mintFrame(Category _category)\\n        external\\n        payable\\n        mintingAvailable\\n        validCategory(_category)\\n        nonReentrant\\n        whenNotPaused\\n    {\\n        if (saleStatus == SaleStatus.PRESALE) {\\n            require(hasRole(PRESALE_ROLE, _msgSender()), \\\"Frame: Address not on list\\\");\\n        }\\n\\n        CategoryDetail storage category = categories[_category];\\n        require(category.tokenIds.length() > 0, \\\"Frame: Sold out\\\");\\n        require(msg.value == category.price, \\\"Frame: Incorrect payment for category\\\");\\n        require(LINK.balanceOf(address(this)) >= fee, \\\"Frame: Not enough LINK\\\");\\n\\n        bytes32 requestId = requestRandomness(keyHash, fee);\\n        requestIdToSender[requestId] = _msgSender();\\n        requestIdToCategory[requestId] = _category;\\n\\n        emit MintRequest(requestId, _msgSender());\\n    }\\n\\n    /**\\n     * @notice fulfillRandomness internal ultimately called by Chainlink Oracles\\n     * @param requestId     VRF request ID\\n     * @param randomNumber  The VRF number\\n     */\\n    function fulfillRandomness(bytes32 requestId, uint256 randomNumber) internal override {\\n        address minter = requestIdToSender[requestId];\\n        CategoryDetail storage category = categories[requestIdToCategory[requestId]];\\n\\n        uint256 tokensReminingInCategory = category.tokenIds.length();\\n        uint256 tokenIdToAllocate;\\n\\n        if (tokensReminingInCategory > 1)\\n            tokenIdToAllocate = category.tokenIds.at(randomNumber % tokensReminingInCategory);\\n        else tokenIdToAllocate = category.tokenIds.at(0);\\n\\n        category.tokenIds.remove(tokenIdToAllocate);\\n        requestIdToTokenId[requestId] = tokenIdToAllocate;\\n        _safeMint(minter, tokenIdToAllocate);\\n\\n        emit MintFulfilled(requestId, minter, tokenIdToAllocate);\\n    }\\n\\n    /**\\n     * @dev Accounting functions\\n     */\\n\\n    /**\\n     * @notice Withdraws all LINK token from this contract\\n     * @param _to Address to receive all the LINK\\n     */\\n    function withdrawAllLink(address payable _to) external onlyOwner(_msgSender()) nonReentrant {\\n        uint256 linkBalance = LINK.balanceOf(address(this));\\n        require(LINK.transfer(_msgSender(), linkBalance), \\\"Frame: Error sending LINK\\\");\\n        emit LinkWithdrawn(_to, linkBalance);\\n    }\\n\\n    /**\\n     * @notice Withdraws an amount of ether from this contract\\n     * @param _to Address to receive the ether\\n     */\\n    function withdrawEther(address payable _to, uint256 _value)\\n        external\\n        onlyOwner(_msgSender())\\n        nonReentrant\\n    {\\n        _transfer(_to, _value);\\n        emit EtherWithdrawn(_to, _value);\\n    }\\n}\\n\",\"keccak256\":\"0xe57c0fbbe4d25b45162e70daf8e99205e237f54858d90c2a617d4ad4af9545f8\",\"license\":\"MIT\"},\"contracts/abstract/Exhibitionable.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"../interface/IExhibitionable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\nabstract contract Exhibitionable is IExhibitionable {\\n    mapping(uint256 => Exhibit) private _exhibits;\\n\\n    function setExhibit(\\n        uint256 _tokenId,\\n        address _exhibitContractAddress,\\n        uint256 _exhibitTokenId\\n    ) external virtual override;\\n\\n    function _setExhibit(\\n        uint256 _tokenId,\\n        address _exhibitContractAddress,\\n        uint256 _exhibitTokenId\\n    ) internal {\\n        Exhibit storage _exhibit = _exhibits[_tokenId];\\n        _exhibit.contractAddress = _exhibitContractAddress;\\n        _exhibit.tokenId = _exhibitTokenId;\\n        emit ExhibitSet(_tokenId, _exhibit.contractAddress, _exhibit.tokenId);\\n    }\\n\\n    function clearExhibit(uint256 _tokenId) external virtual override;\\n\\n    function _clearExhibit(uint256 _tokenId) internal {\\n        _setExhibit(_tokenId, address(0x0), 0);\\n    }\\n\\n    function getExhibit(uint256 _tokenId) external view override returns (Exhibit memory) {\\n        return _exhibits[_tokenId];\\n    }\\n\\n    function exhibitIsOwnedBy(\\n        address _exhibitor,\\n        address _exhibitContractAddress,\\n        uint256 _exhibitTokenId\\n    ) external view override returns (bool) {\\n        bool owned = false;\\n\\n        if (_implementsERC721(_exhibitContractAddress))\\n            owned = _erc721ExhibitIsOwnedBy(_exhibitor, _exhibitContractAddress, _exhibitTokenId);\\n\\n        if (_implementsERC1155(_exhibitContractAddress))\\n            owned = _erc1155ExhibitIsOwnedBy(_exhibitor, _exhibitContractAddress, _exhibitTokenId);\\n\\n        return owned;\\n    }\\n\\n    function _implementsERC721(address _contractAddress) internal view returns (bool) {\\n        return IERC165(_contractAddress).supportsInterface(type(IERC721).interfaceId);\\n    }\\n\\n    function _implementsERC1155(address _contractAddress) internal view returns (bool) {\\n        return IERC165(_contractAddress).supportsInterface(type(IERC1155).interfaceId);\\n    }\\n\\n    function _erc721ExhibitIsOwnedBy(\\n        address _exhibitor,\\n        address _exhibitContractAddress,\\n        uint256 _exhibitTokenId\\n    ) internal view returns (bool) {\\n        return IERC721(_exhibitContractAddress).ownerOf(_exhibitTokenId) == _exhibitor;\\n    }\\n\\n    function _erc1155ExhibitIsOwnedBy(\\n        address _exhibitor,\\n        address _exhibitContractAddress,\\n        uint256 _exhibitTokenId\\n    ) internal view returns (bool) {\\n        return IERC1155(_exhibitContractAddress).balanceOf(_exhibitor, _exhibitTokenId) > 0;\\n    }\\n\\n    function getExhibitTokenURI(uint256 _tokenId) external view override returns (string memory) {\\n        Exhibit storage _exhibit = _exhibits[_tokenId];\\n        string memory tokenUri;\\n\\n        if (_implementsERC721(_exhibit.contractAddress)) {\\n            /**\\n             * @dev See {IERC721Metadata-tokenURI}.\\n             * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n             */\\n            tokenUri = IERC721Metadata(_exhibit.contractAddress).tokenURI(_exhibit.tokenId);\\n        }\\n\\n        if (_implementsERC1155(_exhibit.contractAddress)) {\\n            /**\\n             * @dev See {IERC1155MetadataURI-uri}.\\n             *\\n             * This implementation returns the same URI for *all* token types. It relies\\n             * on the token type ID substitution mechanism\\n             * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n             *\\n             * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n             * actual token type ID.\\n             */\\n            tokenUri = IERC1155MetadataURI(_exhibit.contractAddress).uri(_exhibit.tokenId);\\n        }\\n        return tokenUri;\\n    }\\n}\\n\",\"keccak256\":\"0xde8effa2cedf574a40961b5165e018e58b4855926a0d111430f08141c0a2c50c\",\"license\":\"MIT\"},\"contracts/abstract/Rentable.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"../interface/IRentable.sol\\\";\\n\\nabstract contract Rentable is IRentable {\\n    mapping(uint256 => uint256) public _rentalPrices;\\n    mapping(uint256 => Rental) private _renters;\\n\\n    function setRenter(\\n        uint256 _tokenId,\\n        address _renter,\\n        uint256 _numberOfBlocks\\n    ) external payable virtual override;\\n\\n    function _setRenter(\\n        uint256 _tokenId,\\n        address _renter,\\n        uint256 _numberOfBlocks\\n    ) internal {\\n        Rental storage rental = _renters[_tokenId];\\n        rental.renter = _renter;\\n        rental.rentalExpiryBlock = block.number + _numberOfBlocks;\\n        emit RenterSet(_tokenId, rental.renter, rental.rentalExpiryBlock);\\n    }\\n\\n    function getRenter(uint256 _tokenId) external view override returns (Rental memory) {\\n        return _getRenter(_tokenId);\\n    }\\n\\n    function _getRenter(uint256 _tokenId) internal view returns (Rental memory) {\\n        return _renters[_tokenId];\\n    }\\n\\n    function isCurrentlyRented(uint256 _tokenId) external view override returns (bool) {\\n        return _isCurrentlyRented(_tokenId);\\n    }\\n\\n    function _isCurrentlyRented(uint256 _tokenId) internal view returns (bool) {\\n        Rental memory tokenRental = _renters[_tokenId];\\n        return tokenRental.rentalExpiryBlock > block.number;\\n    }\\n\\n    function tokenIsRentedByAddress(uint256 _tokenId, address _address)\\n        external\\n        view\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        return _tokenIsRentedByAddress(_tokenId, _address);\\n    }\\n\\n    function _tokenIsRentedByAddress(uint256 _tokenId, address _address)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        Rental memory tokenRental = _getRenter(_tokenId);\\n        return tokenRental.renter == _address;\\n    }\\n\\n    function setRentalPricePerBlock(uint256 _tokenId, uint256 _rentalPrice)\\n        external\\n        virtual\\n        override;\\n\\n    function _setRentalPricePerBlock(uint256 _tokenId, uint256 _rentalPrice) internal {\\n        _rentalPrices[_tokenId] = _rentalPrice;\\n    }\\n\\n    function getRentalPricePerBlock(uint256 _tokenId) external view override returns (uint256) {\\n        return _getRentalPricePerBlock(_tokenId);\\n    }\\n\\n    function _getRentalPricePerBlock(uint256 _tokenId) internal view returns (uint256) {\\n        return _rentalPrices[_tokenId];\\n    }\\n}\\n\",\"keccak256\":\"0x647ddee91775d97d47814426cb1260a5a6289747979130502f97d88f9c73061f\",\"license\":\"MIT\"},\"contracts/interface/IExhibitionable.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IExhibitionable {\\n    struct Exhibit {\\n        address contractAddress;\\n        uint256 tokenId;\\n    }\\n\\n    /**\\n     * @notice Triggered when a a new exhibit has been set\\n     * @param _tokenId                   Token identifier which is setting an exhibit\\n     * @param _exhibitContractAddress    The new exhibit contract address\\n     * @param _exhibitTokenId            The token identifier of the exhibit\\n     */\\n    event ExhibitSet(\\n        uint256 indexed _tokenId,\\n        address indexed _exhibitContractAddress,\\n        uint256 _exhibitTokenId\\n    );\\n\\n    /**\\n     * @notice Set an exhibit for a tokenId\\n     * @param _tokenId                   Token identifier which is setting an exhibit\\n     * @param _exhibitContractAddress    The new exhibit contract address\\n     * @param _exhibitTokenId            The token identifier of the exhibit\\n     */\\n    function setExhibit(\\n        uint256 _tokenId,\\n        address _exhibitContractAddress,\\n        uint256 _exhibitTokenId\\n    ) external;\\n\\n    /**\\n     * @notice Return true if the exhibit is owned by exhibtor\\n     * @param _exhibitor                 Exhibitor claiming ownership\\n     * @param _exhibitContractAddress    The new exhibit contract address\\n     * @param _exhibitTokenId            The token identifier of the exhibit\\n     */\\n    function exhibitIsOwnedBy(\\n        address _exhibitor,\\n        address _exhibitContractAddress,\\n        uint256 _exhibitTokenId\\n    ) external view returns (bool);\\n\\n    /**\\n     * @notice Remove the exhibit for a tokenId\\n     * @param _tokenId                   The token identifier of the exhibit\\n     */\\n    function clearExhibit(uint256 _tokenId) external;\\n\\n    /**\\n     * @notice Get the exhibit for a tokenId\\n     * @param _tokenId                   The token identifier of the exhibit\\n     */\\n    function getExhibit(uint256 _tokenId) external view returns (Exhibit memory);\\n\\n    /**\\n     * @notice Get the exhibit token URI for a tokenId\\n     * @param _tokenId                   The token identifier of the exhibit\\n     */\\n    function getExhibitTokenURI(uint256 _tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x719f6991dd7d1688789db803cb7a7c25f096a396b432b18ba969b88e8f2fd778\",\"license\":\"MIT\"},\"contracts/interface/IRentable.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IRentable {\\n    struct Rental {\\n        address renter;\\n        uint256 rentalExpiryBlock;\\n    }\\n\\n    /**\\n     * @notice Triggered when a renter has been set\\n     * @param _tokenId           Token identifier which is setting a renter\\n     * @param _renter            The new renter address\\n     * @param _rentalExpiryBlock The block the rental expires at\\n     */\\n    event RenterSet(uint256 indexed _tokenId, address indexed _renter, uint256 _rentalExpiryBlock);\\n\\n    /**\\n     * @notice Set a renter for a tokenId\\n     * @param _tokenId        Token identifier which is setting a renter\\n     * @param _renter         The new renter address\\n     * @param _numberOfBlocks The number of blocks to rent for\\n     */\\n    function setRenter(\\n        uint256 _tokenId,\\n        address _renter,\\n        uint256 _numberOfBlocks\\n    ) external payable;\\n\\n    /**\\n     * @notice Get a renter for a tokenId\\n     * @param _tokenId        Token identifier which is setting a renter\\n     */\\n    function getRenter(uint256 _tokenId) external view returns (Rental memory);\\n\\n    /**\\n     * @notice Set the rental price per block for a tokenId\\n     * @param _tokenId        Token identifier which is setting a renter\\n     * @param _rentalPrice    The rental price per block\\n     */\\n    function setRentalPricePerBlock(uint256 _tokenId, uint256 _rentalPrice) external;\\n\\n    /**\\n     * @notice Get the rental price per block for a tokenId\\n     * @param _tokenId        Token identifier which is setting a renter\\n     */\\n    function getRentalPricePerBlock(uint256 _tokenId) external view returns (uint256);\\n\\n    /**\\n     * @notice Checks if a token is currently rented by anyone\\n     * @param _tokenId The token to check is rented\\n     */\\n    function isCurrentlyRented(uint256 _tokenId) external view returns (bool);\\n\\n    /**\\n     * @notice Checks if a token is currently rented by address\\n     * @param _tokenId The token to check is rented\\n     * @param _address The address to check if it's rented by\\n     */\\n    function tokenIsRentedByAddress(uint256 _tokenId, address _address)\\n        external\\n        view\\n        returns (bool);\\n}\\n\",\"keccak256\":\"0xfda1925eb3f5c5b552c63bd4e16d7e19cd010ee8b781dcffa98e7c915d79a2de\",\"license\":\"MIT\"},\"contracts/interface/IVersionedContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IVersionedContract {\\n    /**\\n     * @notice Returns the storage, major, minor, and patch version of the contract.\\n     * @return The storage, major, minor, and patch version of the contract.\\n     */\\n    function getVersionNumber()\\n        external\\n        pure\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n}\\n\",\"keccak256\":\"0x53cbed31bc0a0f17cf439e66c66f385a90f8f5e10e7728239f624be62891b740\",\"license\":\"MIT\"},\"contracts/lib/ABDKMath64x64.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-4-Clause\\n/*\\n * ABDK Math 64.64 Smart Contract Library.  Copyright \\u00a9 2019 by ABDK Consulting.\\n * Author: Mikhail Vladimirov <mikhail.vladimirov@gmail.com>\\n */\\npragma solidity ^0.8.0;\\n\\n/**\\n * Smart contract library of mathematical functions operating with signed\\n * 64.64-bit fixed point numbers.  Signed 64.64-bit fixed point number is\\n * basically a simple fraction whose numerator is signed 128-bit integer and\\n * denominator is 2^64.  As long as denominator is always the same, there is no\\n * need to store it, thus in Solidity signed 64.64-bit fixed point numbers are\\n * represented by int128 type holding only the numerator.\\n */\\nlibrary ABDKMath64x64 {\\n    /*\\n     * Minimum value signed 64.64-bit fixed point number may have.\\n     */\\n    int128 private constant MIN_64x64 = -0x80000000000000000000000000000000;\\n\\n    /*\\n     * Maximum value signed 64.64-bit fixed point number may have.\\n     */\\n    int128 private constant MAX_64x64 = 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n    /**\\n     * Convert signed 256-bit integer number into signed 64.64-bit fixed point\\n     * number.  Revert on overflow.\\n     *\\n     * @param x signed 256-bit integer number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function fromInt(int256 x) internal pure returns (int128) {\\n        unchecked {\\n            require(x >= -0x8000000000000000 && x <= 0x7FFFFFFFFFFFFFFF);\\n            return int128(x << 64);\\n        }\\n    }\\n\\n    /**\\n     * Convert signed 64.64 fixed point number into signed 64-bit integer number\\n     * rounding down.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return signed 64-bit integer number\\n     */\\n    function toInt(int128 x) internal pure returns (int64) {\\n        unchecked {\\n            return int64(x >> 64);\\n        }\\n    }\\n\\n    /**\\n     * Convert unsigned 256-bit integer number into signed 64.64-bit fixed point\\n     * number.  Revert on overflow.\\n     *\\n     * @param x unsigned 256-bit integer number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function fromUInt(uint256 x) internal pure returns (int128) {\\n        unchecked {\\n            require(x <= 0x7FFFFFFFFFFFFFFF);\\n            return int128(int256(x << 64));\\n        }\\n    }\\n\\n    /**\\n     * Convert signed 64.64 fixed point number into unsigned 64-bit integer\\n     * number rounding down.  Revert on underflow.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return unsigned 64-bit integer number\\n     */\\n    function toUInt(int128 x) internal pure returns (uint64) {\\n        unchecked {\\n            require(x >= 0);\\n            return uint64(uint128(x >> 64));\\n        }\\n    }\\n\\n    /**\\n     * Convert signed 128.128 fixed point number into signed 64.64-bit fixed point\\n     * number rounding down.  Revert on overflow.\\n     *\\n     * @param x signed 128.128-bin fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function from128x128(int256 x) internal pure returns (int128) {\\n        unchecked {\\n            int256 result = x >> 64;\\n            require(result >= MIN_64x64 && result <= MAX_64x64);\\n            return int128(result);\\n        }\\n    }\\n\\n    /**\\n     * Convert signed 64.64 fixed point number into signed 128.128 fixed point\\n     * number.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return signed 128.128 fixed point number\\n     */\\n    function to128x128(int128 x) internal pure returns (int256) {\\n        unchecked {\\n            return int256(x) << 64;\\n        }\\n    }\\n\\n    /**\\n     * Calculate x + y.  Revert on overflow.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @param y signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function add(int128 x, int128 y) internal pure returns (int128) {\\n        unchecked {\\n            int256 result = int256(x) + y;\\n            require(result >= MIN_64x64 && result <= MAX_64x64);\\n            return int128(result);\\n        }\\n    }\\n\\n    /**\\n     * Calculate x - y.  Revert on overflow.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @param y signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function sub(int128 x, int128 y) internal pure returns (int128) {\\n        unchecked {\\n            int256 result = int256(x) - y;\\n            require(result >= MIN_64x64 && result <= MAX_64x64);\\n            return int128(result);\\n        }\\n    }\\n\\n    /**\\n     * Calculate x * y rounding down.  Revert on overflow.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @param y signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function mul(int128 x, int128 y) internal pure returns (int128) {\\n        unchecked {\\n            int256 result = (int256(x) * y) >> 64;\\n            require(result >= MIN_64x64 && result <= MAX_64x64);\\n            return int128(result);\\n        }\\n    }\\n\\n    /**\\n     * Calculate x * y rounding towards zero, where x is signed 64.64 fixed point\\n     * number and y is signed 256-bit integer number.  Revert on overflow.\\n     *\\n     * @param x signed 64.64 fixed point number\\n     * @param y signed 256-bit integer number\\n     * @return signed 256-bit integer number\\n     */\\n    function muli(int128 x, int256 y) internal pure returns (int256) {\\n        unchecked {\\n            if (x == MIN_64x64) {\\n                require(\\n                    y >= -0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF &&\\n                        y <= 0x1000000000000000000000000000000000000000000000000\\n                );\\n                return -y << 63;\\n            } else {\\n                bool negativeResult = false;\\n                if (x < 0) {\\n                    x = -x;\\n                    negativeResult = true;\\n                }\\n                if (y < 0) {\\n                    y = -y; // We rely on overflow behavior here\\n                    negativeResult = !negativeResult;\\n                }\\n                uint256 absoluteResult = mulu(x, uint256(y));\\n                if (negativeResult) {\\n                    require(\\n                        absoluteResult <=\\n                            0x8000000000000000000000000000000000000000000000000000000000000000\\n                    );\\n                    return -int256(absoluteResult); // We rely on overflow behavior here\\n                } else {\\n                    require(\\n                        absoluteResult <=\\n                            0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\\n                    );\\n                    return int256(absoluteResult);\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Calculate x * y rounding down, where x is signed 64.64 fixed point number\\n     * and y is unsigned 256-bit integer number.  Revert on overflow.\\n     *\\n     * @param x signed 64.64 fixed point number\\n     * @param y unsigned 256-bit integer number\\n     * @return unsigned 256-bit integer number\\n     */\\n    function mulu(int128 x, uint256 y) internal pure returns (uint256) {\\n        unchecked {\\n            if (y == 0) return 0;\\n\\n            require(x >= 0);\\n\\n            uint256 lo = (uint256(int256(x)) * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)) >> 64;\\n            uint256 hi = uint256(int256(x)) * (y >> 128);\\n\\n            require(hi <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n            hi <<= 64;\\n\\n            require(hi <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF - lo);\\n            return hi + lo;\\n        }\\n    }\\n\\n    /**\\n     * Calculate x / y rounding towards zero.  Revert on overflow or when y is\\n     * zero.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @param y signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function div(int128 x, int128 y) internal pure returns (int128) {\\n        unchecked {\\n            require(y != 0);\\n            int256 result = (int256(x) << 64) / y;\\n            require(result >= MIN_64x64 && result <= MAX_64x64);\\n            return int128(result);\\n        }\\n    }\\n\\n    /**\\n     * Calculate x / y rounding towards zero, where x and y are signed 256-bit\\n     * integer numbers.  Revert on overflow or when y is zero.\\n     *\\n     * @param x signed 256-bit integer number\\n     * @param y signed 256-bit integer number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function divi(int256 x, int256 y) internal pure returns (int128) {\\n        unchecked {\\n            require(y != 0);\\n\\n            bool negativeResult = false;\\n            if (x < 0) {\\n                x = -x; // We rely on overflow behavior here\\n                negativeResult = true;\\n            }\\n            if (y < 0) {\\n                y = -y; // We rely on overflow behavior here\\n                negativeResult = !negativeResult;\\n            }\\n            uint128 absoluteResult = divuu(uint256(x), uint256(y));\\n            if (negativeResult) {\\n                require(absoluteResult <= 0x80000000000000000000000000000000);\\n                return -int128(absoluteResult); // We rely on overflow behavior here\\n            } else {\\n                require(absoluteResult <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n                return int128(absoluteResult); // We rely on overflow behavior here\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\\n     * integer numbers.  Revert on overflow or when y is zero.\\n     *\\n     * @param x unsigned 256-bit integer number\\n     * @param y unsigned 256-bit integer number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function divu(uint256 x, uint256 y) internal pure returns (int128) {\\n        unchecked {\\n            require(y != 0);\\n            uint128 result = divuu(x, y);\\n            require(result <= uint128(MAX_64x64));\\n            return int128(result);\\n        }\\n    }\\n\\n    /**\\n     * Calculate -x.  Revert on overflow.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function neg(int128 x) internal pure returns (int128) {\\n        unchecked {\\n            require(x != MIN_64x64);\\n            return -x;\\n        }\\n    }\\n\\n    /**\\n     * Calculate |x|.  Revert on overflow.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function abs(int128 x) internal pure returns (int128) {\\n        unchecked {\\n            require(x != MIN_64x64);\\n            return x < 0 ? -x : x;\\n        }\\n    }\\n\\n    /**\\n     * Calculate 1 / x rounding towards zero.  Revert on overflow or when x is\\n     * zero.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function inv(int128 x) internal pure returns (int128) {\\n        unchecked {\\n            require(x != 0);\\n            int256 result = int256(0x100000000000000000000000000000000) / x;\\n            require(result >= MIN_64x64 && result <= MAX_64x64);\\n            return int128(result);\\n        }\\n    }\\n\\n    /**\\n     * Calculate arithmetics average of x and y, i.e. (x + y) / 2 rounding down.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @param y signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function avg(int128 x, int128 y) internal pure returns (int128) {\\n        unchecked {\\n            return int128((int256(x) + int256(y)) >> 1);\\n        }\\n    }\\n\\n    /**\\n     * Calculate geometric average of x and y, i.e. sqrt (x * y) rounding down.\\n     * Revert on overflow or in case x * y is negative.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @param y signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function gavg(int128 x, int128 y) internal pure returns (int128) {\\n        unchecked {\\n            int256 m = int256(x) * int256(y);\\n            require(m >= 0);\\n            require(m < 0x4000000000000000000000000000000000000000000000000000000000000000);\\n            return int128(sqrtu(uint256(m)));\\n        }\\n    }\\n\\n    /**\\n     * Calculate x^y assuming 0^0 is 1, where x is signed 64.64 fixed point number\\n     * and y is unsigned 256-bit integer number.  Revert on overflow.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @param y uint256 value\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function pow(int128 x, uint256 y) internal pure returns (int128) {\\n        unchecked {\\n            bool negative = x < 0 && y & 1 == 1;\\n\\n            uint256 absX = uint128(x < 0 ? -x : x);\\n            uint256 absResult;\\n            absResult = 0x100000000000000000000000000000000;\\n\\n            if (absX <= 0x10000000000000000) {\\n                absX <<= 63;\\n                while (y != 0) {\\n                    if (y & 0x1 != 0) {\\n                        absResult = (absResult * absX) >> 127;\\n                    }\\n                    absX = (absX * absX) >> 127;\\n\\n                    if (y & 0x2 != 0) {\\n                        absResult = (absResult * absX) >> 127;\\n                    }\\n                    absX = (absX * absX) >> 127;\\n\\n                    if (y & 0x4 != 0) {\\n                        absResult = (absResult * absX) >> 127;\\n                    }\\n                    absX = (absX * absX) >> 127;\\n\\n                    if (y & 0x8 != 0) {\\n                        absResult = (absResult * absX) >> 127;\\n                    }\\n                    absX = (absX * absX) >> 127;\\n\\n                    y >>= 4;\\n                }\\n\\n                absResult >>= 64;\\n            } else {\\n                uint256 absXShift = 63;\\n                if (absX < 0x1000000000000000000000000) {\\n                    absX <<= 32;\\n                    absXShift -= 32;\\n                }\\n                if (absX < 0x10000000000000000000000000000) {\\n                    absX <<= 16;\\n                    absXShift -= 16;\\n                }\\n                if (absX < 0x1000000000000000000000000000000) {\\n                    absX <<= 8;\\n                    absXShift -= 8;\\n                }\\n                if (absX < 0x10000000000000000000000000000000) {\\n                    absX <<= 4;\\n                    absXShift -= 4;\\n                }\\n                if (absX < 0x40000000000000000000000000000000) {\\n                    absX <<= 2;\\n                    absXShift -= 2;\\n                }\\n                if (absX < 0x80000000000000000000000000000000) {\\n                    absX <<= 1;\\n                    absXShift -= 1;\\n                }\\n\\n                uint256 resultShift = 0;\\n                while (y != 0) {\\n                    require(absXShift < 64);\\n\\n                    if (y & 0x1 != 0) {\\n                        absResult = (absResult * absX) >> 127;\\n                        resultShift += absXShift;\\n                        if (absResult > 0x100000000000000000000000000000000) {\\n                            absResult >>= 1;\\n                            resultShift += 1;\\n                        }\\n                    }\\n                    absX = (absX * absX) >> 127;\\n                    absXShift <<= 1;\\n                    if (absX >= 0x100000000000000000000000000000000) {\\n                        absX >>= 1;\\n                        absXShift += 1;\\n                    }\\n\\n                    y >>= 1;\\n                }\\n\\n                require(resultShift < 64);\\n                absResult >>= 64 - resultShift;\\n            }\\n            int256 result = negative ? -int256(absResult) : int256(absResult);\\n            require(result >= MIN_64x64 && result <= MAX_64x64);\\n            return int128(result);\\n        }\\n    }\\n\\n    /**\\n     * Calculate sqrt (x) rounding down.  Revert if x < 0.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function sqrt(int128 x) internal pure returns (int128) {\\n        unchecked {\\n            require(x >= 0);\\n            return int128(sqrtu(uint256(int256(x)) << 64));\\n        }\\n    }\\n\\n    /**\\n     * Calculate binary logarithm of x.  Revert if x <= 0.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function log_2(int128 x) internal pure returns (int128) {\\n        unchecked {\\n            require(x > 0);\\n\\n            int256 msb = 0;\\n            int256 xc = x;\\n            if (xc >= 0x10000000000000000) {\\n                xc >>= 64;\\n                msb += 64;\\n            }\\n            if (xc >= 0x100000000) {\\n                xc >>= 32;\\n                msb += 32;\\n            }\\n            if (xc >= 0x10000) {\\n                xc >>= 16;\\n                msb += 16;\\n            }\\n            if (xc >= 0x100) {\\n                xc >>= 8;\\n                msb += 8;\\n            }\\n            if (xc >= 0x10) {\\n                xc >>= 4;\\n                msb += 4;\\n            }\\n            if (xc >= 0x4) {\\n                xc >>= 2;\\n                msb += 2;\\n            }\\n            if (xc >= 0x2) msb += 1; // No need to shift xc anymore\\n\\n            int256 result = (msb - 64) << 64;\\n            uint256 ux = uint256(int256(x)) << uint256(127 - msb);\\n            for (int256 bit = 0x8000000000000000; bit > 0; bit >>= 1) {\\n                ux *= ux;\\n                uint256 b = ux >> 255;\\n                ux >>= 127 + b;\\n                result += bit * int256(b);\\n            }\\n\\n            return int128(result);\\n        }\\n    }\\n\\n    /**\\n     * Calculate natural logarithm of x.  Revert if x <= 0.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function ln(int128 x) internal pure returns (int128) {\\n        unchecked {\\n            require(x > 0);\\n\\n            return\\n                int128(\\n                    int256((uint256(int256(log_2(x))) * 0xB17217F7D1CF79ABC9E3B39803F2F6AF) >> 128)\\n                );\\n        }\\n    }\\n\\n    /**\\n     * Calculate binary exponent of x.  Revert on overflow.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function exp_2(int128 x) internal pure returns (int128) {\\n        unchecked {\\n            require(x < 0x400000000000000000); // Overflow\\n\\n            if (x < -0x400000000000000000) return 0; // Underflow\\n\\n            uint256 result = 0x80000000000000000000000000000000;\\n\\n            if (x & 0x8000000000000000 > 0)\\n                result = (result * 0x16A09E667F3BCC908B2FB1366EA957D3E) >> 128;\\n            if (x & 0x4000000000000000 > 0)\\n                result = (result * 0x1306FE0A31B7152DE8D5A46305C85EDEC) >> 128;\\n            if (x & 0x2000000000000000 > 0)\\n                result = (result * 0x1172B83C7D517ADCDF7C8C50EB14A791F) >> 128;\\n            if (x & 0x1000000000000000 > 0)\\n                result = (result * 0x10B5586CF9890F6298B92B71842A98363) >> 128;\\n            if (x & 0x800000000000000 > 0)\\n                result = (result * 0x1059B0D31585743AE7C548EB68CA417FD) >> 128;\\n            if (x & 0x400000000000000 > 0)\\n                result = (result * 0x102C9A3E778060EE6F7CACA4F7A29BDE8) >> 128;\\n            if (x & 0x200000000000000 > 0)\\n                result = (result * 0x10163DA9FB33356D84A66AE336DCDFA3F) >> 128;\\n            if (x & 0x100000000000000 > 0)\\n                result = (result * 0x100B1AFA5ABCBED6129AB13EC11DC9543) >> 128;\\n            if (x & 0x80000000000000 > 0)\\n                result = (result * 0x10058C86DA1C09EA1FF19D294CF2F679B) >> 128;\\n            if (x & 0x40000000000000 > 0)\\n                result = (result * 0x1002C605E2E8CEC506D21BFC89A23A00F) >> 128;\\n            if (x & 0x20000000000000 > 0)\\n                result = (result * 0x100162F3904051FA128BCA9C55C31E5DF) >> 128;\\n            if (x & 0x10000000000000 > 0)\\n                result = (result * 0x1000B175EFFDC76BA38E31671CA939725) >> 128;\\n            if (x & 0x8000000000000 > 0)\\n                result = (result * 0x100058BA01FB9F96D6CACD4B180917C3D) >> 128;\\n            if (x & 0x4000000000000 > 0)\\n                result = (result * 0x10002C5CC37DA9491D0985C348C68E7B3) >> 128;\\n            if (x & 0x2000000000000 > 0)\\n                result = (result * 0x1000162E525EE054754457D5995292026) >> 128;\\n            if (x & 0x1000000000000 > 0)\\n                result = (result * 0x10000B17255775C040618BF4A4ADE83FC) >> 128;\\n            if (x & 0x800000000000 > 0)\\n                result = (result * 0x1000058B91B5BC9AE2EED81E9B7D4CFAB) >> 128;\\n            if (x & 0x400000000000 > 0)\\n                result = (result * 0x100002C5C89D5EC6CA4D7C8ACC017B7C9) >> 128;\\n            if (x & 0x200000000000 > 0)\\n                result = (result * 0x10000162E43F4F831060E02D839A9D16D) >> 128;\\n            if (x & 0x100000000000 > 0)\\n                result = (result * 0x100000B1721BCFC99D9F890EA06911763) >> 128;\\n            if (x & 0x80000000000 > 0)\\n                result = (result * 0x10000058B90CF1E6D97F9CA14DBCC1628) >> 128;\\n            if (x & 0x40000000000 > 0)\\n                result = (result * 0x1000002C5C863B73F016468F6BAC5CA2B) >> 128;\\n            if (x & 0x20000000000 > 0)\\n                result = (result * 0x100000162E430E5A18F6119E3C02282A5) >> 128;\\n            if (x & 0x10000000000 > 0)\\n                result = (result * 0x1000000B1721835514B86E6D96EFD1BFE) >> 128;\\n            if (x & 0x8000000000 > 0)\\n                result = (result * 0x100000058B90C0B48C6BE5DF846C5B2EF) >> 128;\\n            if (x & 0x4000000000 > 0)\\n                result = (result * 0x10000002C5C8601CC6B9E94213C72737A) >> 128;\\n            if (x & 0x2000000000 > 0)\\n                result = (result * 0x1000000162E42FFF037DF38AA2B219F06) >> 128;\\n            if (x & 0x1000000000 > 0)\\n                result = (result * 0x10000000B17217FBA9C739AA5819F44F9) >> 128;\\n            if (x & 0x800000000 > 0) result = (result * 0x1000000058B90BFCDEE5ACD3C1CEDC823) >> 128;\\n            if (x & 0x400000000 > 0) result = (result * 0x100000002C5C85FE31F35A6A30DA1BE50) >> 128;\\n            if (x & 0x200000000 > 0) result = (result * 0x10000000162E42FF0999CE3541B9FFFCF) >> 128;\\n            if (x & 0x100000000 > 0) result = (result * 0x100000000B17217F80F4EF5AADDA45554) >> 128;\\n            if (x & 0x80000000 > 0) result = (result * 0x10000000058B90BFBF8479BD5A81B51AD) >> 128;\\n            if (x & 0x40000000 > 0) result = (result * 0x1000000002C5C85FDF84BD62AE30A74CC) >> 128;\\n            if (x & 0x20000000 > 0) result = (result * 0x100000000162E42FEFB2FED257559BDAA) >> 128;\\n            if (x & 0x10000000 > 0) result = (result * 0x1000000000B17217F7D5A7716BBA4A9AE) >> 128;\\n            if (x & 0x8000000 > 0) result = (result * 0x100000000058B90BFBE9DDBAC5E109CCE) >> 128;\\n            if (x & 0x4000000 > 0) result = (result * 0x10000000002C5C85FDF4B15DE6F17EB0D) >> 128;\\n            if (x & 0x2000000 > 0) result = (result * 0x1000000000162E42FEFA494F1478FDE05) >> 128;\\n            if (x & 0x1000000 > 0) result = (result * 0x10000000000B17217F7D20CF927C8E94C) >> 128;\\n            if (x & 0x800000 > 0) result = (result * 0x1000000000058B90BFBE8F71CB4E4B33D) >> 128;\\n            if (x & 0x400000 > 0) result = (result * 0x100000000002C5C85FDF477B662B26945) >> 128;\\n            if (x & 0x200000 > 0) result = (result * 0x10000000000162E42FEFA3AE53369388C) >> 128;\\n            if (x & 0x100000 > 0) result = (result * 0x100000000000B17217F7D1D351A389D40) >> 128;\\n            if (x & 0x80000 > 0) result = (result * 0x10000000000058B90BFBE8E8B2D3D4EDE) >> 128;\\n            if (x & 0x40000 > 0) result = (result * 0x1000000000002C5C85FDF4741BEA6E77E) >> 128;\\n            if (x & 0x20000 > 0) result = (result * 0x100000000000162E42FEFA39FE95583C2) >> 128;\\n            if (x & 0x10000 > 0) result = (result * 0x1000000000000B17217F7D1CFB72B45E1) >> 128;\\n            if (x & 0x8000 > 0) result = (result * 0x100000000000058B90BFBE8E7CC35C3F0) >> 128;\\n            if (x & 0x4000 > 0) result = (result * 0x10000000000002C5C85FDF473E242EA38) >> 128;\\n            if (x & 0x2000 > 0) result = (result * 0x1000000000000162E42FEFA39F02B772C) >> 128;\\n            if (x & 0x1000 > 0) result = (result * 0x10000000000000B17217F7D1CF7D83C1A) >> 128;\\n            if (x & 0x800 > 0) result = (result * 0x1000000000000058B90BFBE8E7BDCBE2E) >> 128;\\n            if (x & 0x400 > 0) result = (result * 0x100000000000002C5C85FDF473DEA871F) >> 128;\\n            if (x & 0x200 > 0) result = (result * 0x10000000000000162E42FEFA39EF44D91) >> 128;\\n            if (x & 0x100 > 0) result = (result * 0x100000000000000B17217F7D1CF79E949) >> 128;\\n            if (x & 0x80 > 0) result = (result * 0x10000000000000058B90BFBE8E7BCE544) >> 128;\\n            if (x & 0x40 > 0) result = (result * 0x1000000000000002C5C85FDF473DE6ECA) >> 128;\\n            if (x & 0x20 > 0) result = (result * 0x100000000000000162E42FEFA39EF366F) >> 128;\\n            if (x & 0x10 > 0) result = (result * 0x1000000000000000B17217F7D1CF79AFA) >> 128;\\n            if (x & 0x8 > 0) result = (result * 0x100000000000000058B90BFBE8E7BCD6D) >> 128;\\n            if (x & 0x4 > 0) result = (result * 0x10000000000000002C5C85FDF473DE6B2) >> 128;\\n            if (x & 0x2 > 0) result = (result * 0x1000000000000000162E42FEFA39EF358) >> 128;\\n            if (x & 0x1 > 0) result = (result * 0x10000000000000000B17217F7D1CF79AB) >> 128;\\n\\n            result >>= uint256(int256(63 - (x >> 64)));\\n            require(result <= uint256(int256(MAX_64x64)));\\n\\n            return int128(int256(result));\\n        }\\n    }\\n\\n    /**\\n     * Calculate natural exponent of x.  Revert on overflow.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function exp(int128 x) internal pure returns (int128) {\\n        unchecked {\\n            require(x < 0x400000000000000000); // Overflow\\n\\n            if (x < -0x400000000000000000) return 0; // Underflow\\n\\n            return exp_2(int128((int256(x) * 0x171547652B82FE1777D0FFDA0D23A7D12) >> 128));\\n        }\\n    }\\n\\n    /**\\n     * Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\\n     * integer numbers.  Revert on overflow or when y is zero.\\n     *\\n     * @param x unsigned 256-bit integer number\\n     * @param y unsigned 256-bit integer number\\n     * @return unsigned 64.64-bit fixed point number\\n     */\\n    function divuu(uint256 x, uint256 y) private pure returns (uint128) {\\n        unchecked {\\n            require(y != 0);\\n\\n            uint256 result;\\n\\n            if (x <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF) result = (x << 64) / y;\\n            else {\\n                uint256 msb = 192;\\n                uint256 xc = x >> 192;\\n                if (xc >= 0x100000000) {\\n                    xc >>= 32;\\n                    msb += 32;\\n                }\\n                if (xc >= 0x10000) {\\n                    xc >>= 16;\\n                    msb += 16;\\n                }\\n                if (xc >= 0x100) {\\n                    xc >>= 8;\\n                    msb += 8;\\n                }\\n                if (xc >= 0x10) {\\n                    xc >>= 4;\\n                    msb += 4;\\n                }\\n                if (xc >= 0x4) {\\n                    xc >>= 2;\\n                    msb += 2;\\n                }\\n                if (xc >= 0x2) msb += 1; // No need to shift xc anymore\\n\\n                result = (x << (255 - msb)) / (((y - 1) >> (msb - 191)) + 1);\\n                require(result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n\\n                uint256 hi = result * (y >> 128);\\n                uint256 lo = result * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n\\n                uint256 xh = x >> 192;\\n                uint256 xl = x << 64;\\n\\n                if (xl < lo) xh -= 1;\\n                xl -= lo; // We rely on overflow behavior here\\n                lo = hi << 128;\\n                if (xl < lo) xh -= 1;\\n                xl -= lo; // We rely on overflow behavior here\\n\\n                assert(xh == hi >> 128);\\n\\n                result += xl / y;\\n            }\\n\\n            require(result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n            return uint128(result);\\n        }\\n    }\\n\\n    /**\\n     * Calculate sqrt (x) rounding down, where x is unsigned 256-bit integer\\n     * number.\\n     *\\n     * @param x unsigned 256-bit integer number\\n     * @return unsigned 128-bit integer number\\n     */\\n    function sqrtu(uint256 x) private pure returns (uint128) {\\n        unchecked {\\n            if (x == 0) return 0;\\n            else {\\n                uint256 xx = x;\\n                uint256 r = 1;\\n                if (xx >= 0x100000000000000000000000000000000) {\\n                    xx >>= 128;\\n                    r <<= 64;\\n                }\\n                if (xx >= 0x10000000000000000) {\\n                    xx >>= 64;\\n                    r <<= 32;\\n                }\\n                if (xx >= 0x100000000) {\\n                    xx >>= 32;\\n                    r <<= 16;\\n                }\\n                if (xx >= 0x10000) {\\n                    xx >>= 16;\\n                    r <<= 8;\\n                }\\n                if (xx >= 0x100) {\\n                    xx >>= 8;\\n                    r <<= 4;\\n                }\\n                if (xx >= 0x10) {\\n                    xx >>= 4;\\n                    r <<= 2;\\n                }\\n                if (xx >= 0x8) {\\n                    r <<= 1;\\n                }\\n                r = (r + x / r) >> 1;\\n                r = (r + x / r) >> 1;\\n                r = (r + x / r) >> 1;\\n                r = (r + x / r) >> 1;\\n                r = (r + x / r) >> 1;\\n                r = (r + x / r) >> 1;\\n                r = (r + x / r) >> 1; // Seven iterations should be enough\\n                uint256 r1 = x / r;\\n                return uint128(r < r1 ? r : r1);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xae091a78b7fbfa309db6ac054bb6ff2a172b04152f46feb85fde8dfee2bf4e87\",\"license\":\"BSD-4-Clause\"},\"contracts/lib/AllowList.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nlibrary AllowList {\\n\\n    function getAllowList() external pure returns (address[119] memory) {\\n        return [\\n            0x3146242E1b95A1ACf64E385c84200600AAc78839,\\n            0x21Cf67Ebba0F6e18cDdb1da09B0361a0Fe621565,\\n            0xb36b0f1d29b127542186CA1995e1d59c4cCD2C7f,\\n            0xBc2785b363bd5b7c0Ae8CdC3874101F888393AF5,\\n            0xf7C9CaE52b345f3C8dc8105577E87f7911B52f4D,\\n            0xD46f082231EF8e975265fb0c143b02B23CdC030d,\\n            0xc9fD59153c9DF38F3E6aB45568B5f8372aB5AB08,\\n            0x42E3b2B9969308C2FA6c4B71f6a13762e3136a1a,\\n            0x3d3d5f950b6702f2A13fd4eb2D10a1C15185FD5c,\\n            0xbd9d1D31A6a451F7a8ec61fC5fd491fD59d5f489,\\n            0x21Cf67Ebba0F6e18cDdb1da09B0361a0Fe621565,\\n            0x3342d7DF6806600dBA1FcD48d1222825dfdBCB78,\\n            0x2203035B20499F5C515eA8ABCD7e597D9D1074f3,\\n            0x6D8F32A67Ee02292431A1249a5E8aaCa156425cA,\\n            0xeEc9F7A228C212ab363aD1156e4933556D6a72a9,\\n            0xD813824721Afeaf441a35Bdbfea49261f2edf5ca,\\n            0xEee987DD48a8BD7071812232473ee847A235C02F,\\n            0x14baC35AC95EBb8828307806aC748bb7321A0026,\\n            0x50Db2A16b185A894EDffD076558C2694767C1280,\\n            0x3342d7DF6806600dBA1FcD48d1222825dfdBCB78,\\n            0x08b4B79A44364f7d8A9Bf737C704bD59ebCCfB27,\\n            0xd1b9b828a727A03c0947613c81eDE59e354E84B7,\\n            0xd9BEad417C25CE07Ee87c201619EE3F0Bd77940D,\\n            0x3d3d5f950b6702f2A13fd4eb2D10a1C15185FD5c,\\n            0xa1F14fc2CCb14EA4856208dC21d9b77B83C2134d,\\n            0x70C68d5E579ece1Bf3A0A3AC03c42020B41693C3,\\n            0xf636C77Ffb54ED04fD869142D59968e5D6A2AB6c,\\n            0x3380582390eC5C3d956107C6472B352cC917E955,\\n            0xd48C866CCB1C540b74fDfEbE398103312ee9367D,\\n            0x6EE9209Ef6e3624Fc7F5829BE6Eb1b729d6F80EE,\\n            0xfa634E983fDDd3E1225227e8BcEec244670263c7,\\n            0xfa634E983fDDd3E1225227e8BcEec244670263c7,\\n            0x6367B50a56Fd7874288269680469afBa4e1CA7e6,\\n            0x9aAa0D92888F1C31f7678eF18C77c78f3a65E348,\\n            0x9666df32D66A10fA90bC3E42e531eb14A2D9b064,\\n            0x9a76B2BABEe120843ab316e2aec97876055feFdf,\\n            0xeEc9F7A228C212ab363aD1156e4933556D6a72a9,\\n            0xBc2785b363bd5b7c0Ae8CdC3874101F888393AF5,\\n            0xFF36E4237A5dac9B9Ac10BCd7b6d7a969483293F,\\n            0xD813824721Afeaf441a35Bdbfea49261f2edf5ca,\\n            0xA6a0c9A482fc762D5496185261998Fb3c706928e,\\n            0x40E18743699644C805fe8f2946E1147D207747B5,\\n            0xaD5cf99ca2A181AbF2A2faCE08Cefd45Ad94ed60,\\n            0xca68ccfCc97A8075ae7163A7b86A5Ee1aa09A4Ca,\\n            0x7298B0fb3fbb1a2900364f45f9f0f92B65Ace069,\\n            0x2906f37e8E6d43Ca035488Da1F870C93d70d04fb,\\n            0x72a0726Ae7a9054476a8C7E759962A4dA667175F,\\n            0xf2da64cF36E390957A912ae04342ebf70857EBAc,\\n            0x645d875519cDAAdA97c6ac2EF3D213D04b51359f,\\n            0xFb388500b3Dd8e908C88EfcFe86d3f5b9D604747,\\n            0x56E2b3a3f27789dA27858eaBeca4461700162fFd,\\n            0x7E064A3a972e8dD2cD0e26FAa6730C00FAe2Aa0A,\\n            0x632E75cedF495Ccd2cb891B55ED97E4Aa11eC946,\\n            0x341Ff27F5c3E3376d092cd19c8EAC4CCB1B7CeaE,\\n            0xaaeD29C2b8F389A7192d41D1c28d1bA61e307d20,\\n            0x59234591ae5246B8dc35B07eEDf9e1E93d28c8Be,\\n            0x14baC35AC95EBb8828307806aC748bb7321A0026,\\n            0x0E31a27f6F1e7142C9c7f7f4f254C513faBD1E1B,\\n            0x6344A87D1a871798Ec2213D5c94dA17De7012399,\\n            0xA8668E1639733f070C818a155EEBD69cde93c5f3,\\n            0x32Becc88186152FFfA9DB99fb830b66F6396C630,\\n            0x3dc6D8312c906fEac4C9c6ad06884cF477F8a708,\\n            0x380336041fEd6d3de0C0A1f5079668760CD64779,\\n            0x382981DFcf4e5164b5430C4FabBee2bF7d6E3d5D,\\n            0x47fd829cd4a550e7fF216599483b171Ca9ABAcB8,\\n            0x9666df32D66A10fA90bC3E42e531eb14A2D9b064,\\n            0xC3c136122d7819Da60b5f7550A1Ac689d1e7EEf2,\\n            0x98Ad774fc109787E50AD2AE1BDa2fDf855b6f6cc,\\n            0xcbc16F59968B3B92c1cC4C8215ece339ACA96040,\\n            0xDbcf7F6441797e5351D300B2b20D8A754B2a888F,\\n            0x748d47be167Bc97E4Ba80C8C421Fa24C79a49Fbe,\\n            0x0E2126f99134Af90aa43149387eC252BFC8fBa0d,\\n            0x31e1cf8a99c1D89b1D99b047565DC2475f9FE269,\\n            0x42647285714407c7E4664be52e3a4Ab38a2A7EF1,\\n            0xDF8d7aE76c468483Bd93E2c1D24d73504bb30962,\\n            0xDC0C2D971bDab9BeB3d8436fFe08494d40C0DBfD,\\n            0xeAEF7E5F5C1212f4bf7953C4b8C66DEBe81B9248,\\n            0x58A4007Fa212170bb539dD5A860cB5fC49031DDF,\\n            0x9dB170d5214Cc654Ef7423025EFC14EF21436981,\\n            0x09a089F8bF325D4Ea776F4042ABCc2e2Ad37A713,\\n            0xcE0d0A205175200CFF87afa13D30f1D6Ea4aBb90,\\n            0x5dd657AB879D97641F09Aa0fCe4492D74dac626e,\\n            0x5Be4f39BfBCA1123a00B34f42eb997cdE8992fC8,\\n            0x61A13CBd1aF590ce296C0c524eA3340062ac9380,\\n            0xAf9781F8Ad73B4cD0aC06c2124c9E31A6e725C0a,\\n            0xfa8bE98C63C52C7216DD3083119FF53B5c7836FB,\\n            0xdD0a34A0190D57a7642e18903f41F602Ac308816,\\n            0x99dD9b625e3d5D83dcEdDB5ef7F8A3174123C006,\\n            0xD34f559B2602C5b9E0cD9E1f54cAEc0746BC4fbF,\\n            0xC5224a994Dba1fB1EDb8Facc372658f8a934B35f,\\n            0x9aAa0D92888F1C31f7678eF18C77c78f3a65E348,\\n            0x3E5E4Ad7207eb68929B3f2f643eDdCdc548013D5,\\n            0x7238135f989b5304af8169dE483aabe9850DC74b,\\n            0x009FC4A83b95819BB68dceb620c2492FCd5d0932,\\n            0x8046cF7315549cf87608eb3F2FF0a6E20888e010,\\n            0xe855Cca7E2b0D3e3682153DEaB2B27a676551bb3,\\n            0x305bCAA6851c3a29FCBE47a44f7AaFC6465aDDF8,\\n            0x611b15330D927EF98a01BE58F1805008cAfF46B4,\\n            0x277Ae3bE8d778697FF30e7cd7f7d945D0Bbe88b7,\\n            0x4bb0A135503CB32007732E3758f5bDe46e631602,\\n            0x106a3B778fA518C0aa21Ba459d35a4f61711575a,\\n            0x07AC123d23Bf1FBd8D735ba89216EDCecd2abd88,\\n            0x7b35d77d05bc8883487535451aAFE9735658c4F0,\\n            0x1410263F1C6C20a26e24b7d5f749de0B3797621c,\\n            0x261A5C4A4817D1b3A28F316Bd5e9F397ccfA2f6E,\\n            0x40B17fFf5E9D4524Cc8e2615198069E27459BE9b,\\n            0xd8c5765BEb94D5b669Ce5F216327EB8bF3733078,\\n            0x92Ad1567CEEea549037CF3f981F9BfED9d317806,\\n            0xE813bB961B8040943B654B5879dF29D9987FFCd0,\\n            0xA0e268F89e641D92573D28FB82643e11972e051c,\\n            0x9e2692DE2Ec83F72389f738b81f75bA7a37Bf009,\\n            0xA3b02b18225B77Dd79558405875EF1dfC248a8aA,\\n            0xe8e11370576322cDda86429Dd82579eF7E52F72C,\\n            0x83fcF4aa2682306009D5D354DbaF27443f441960,\\n            0xEee987DD48a8BD7071812232473ee847A235C02F,\\n            0xeEc9F7A228C212ab363aD1156e4933556D6a72a9,\\n            0x7f87B77D9b36BEcF65D9341d6a1A46D04D42c335,\\n            0xDE61049559608bff7bBc4BDCBe286351aF6e0C46,\\n            0x922822F887cB2E31b205FC45CFA8A6B887B5286a\\n        ];\\n    }\\n\\n}\",\"keccak256\":\"0xb1e0a8832783e6461725b56649b9068cfe6422badf02df85d1f120c4586caaf2\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x60806040526004361061038c5760003560e01c80636352211e116101dc578063a217fddf11610102578063d057d24c116100a0578063e8a3d4851161006f578063e8a3d48514610b49578063e985e9c514610b5e578063eb155e3114610ba7578063fc1560b714610bc757600080fd5b8063d057d24c14610a5f578063d539139314610ac1578063d547741f14610af5578063e63ab1e914610b1557600080fd5b8063a9c934f0116100dc578063a9c934f0146109ec578063b88d4fde146109ff578063c87b56dd14610a1f578063ca15c87314610a3f57600080fd5b8063a217fddf1461097a578063a22cb4651461098f578063a3e5cb51146109af57600080fd5b8063817d32d01161017a5780639326197a116101495780639326197a146108e457806394985ddd1461091857806395d89b411461093857806396eb80961461094d57600080fd5b8063817d32d01461086f5780638456cb591461088f5780639010d07c146108a457806391d14854146108c457600080fd5b80636a627842116101b65780636a627842146107ef57806370a082311461080f5780637e70f7cc1461082f5780637eaf76591461084f57600080fd5b80636352211e1461078f57806369087819146107af578063690e4bed146107cf57600080fd5b80633009c19b116102c15780634684c6111161025f578063522f68151161022e578063522f68151461070c57806354255be01461072c578063595ef018146107615780635c975abb1461077757600080fd5b80634684c6111461068c5780634891ad88146106ac5780634dd15481146106cc5780634f6ccce7146106ec57600080fd5b80633db07cb81161029b5780633db07cb8146106175780633f4ba83a1461063757806342842e0e1461064c57806342966c681461066c57600080fd5b80633009c19b146105b457806333a9dbe7146105e157806336568abe146105f757600080fd5b8063219c0eee1161032e578063248a9ca311610308578063248a9ca3146105245780632f2ff15d146105545780632f745c59146105745780633007a2fa1461059457600080fd5b8063219c0eee146104a157806322881f88146104d757806323b872dd1461050457600080fd5b8063095ea7b31161036a578063095ea7b31461042057806309acea491461044257806318160ddd14610462578063213a42341461048157600080fd5b806301ffc9a71461039157806306fdde03146103c6578063081812fc146103e8575b600080fd5b34801561039d57600080fd5b506103b16103ac3660046146c9565b610bda565b60405190151581526020015b60405180910390f35b3480156103d257600080fd5b506103db610beb565b6040516103bd919061497f565b3480156103f457600080fd5b5061040861040336600461466c565b610c7d565b6040516001600160a01b0390911681526020016103bd565b34801561042c57600080fd5b5061044061043b36600461463e565b610d0a565b005b34801561044e57600080fd5b5061044061045d36600461466c565b610e20565b34801561046e57600080fd5b50600e545b6040519081526020016103bd565b34801561048d57600080fd5b5061044061049c36600461471b565b610e8b565b3480156104ad57600080fd5b506104086104bc36600461466c565b6015602052600090815260409020546001600160a01b031681565b3480156104e357600080fd5b506104736104f236600461466c565b60176020526000908152604090205481565b34801561051057600080fd5b5061044061051f36600461452a565b610fd9565b34801561053057600080fd5b5061047361053f36600461466c565b60009081526004602052604090206001015490565b34801561056057600080fd5b5061044061056f366004614684565b61100b565b34801561058057600080fd5b5061047361058f36600461463e565b61102d565b3480156105a057600080fd5b506103b16105af366004614684565b6110c3565b3480156105c057600080fd5b506105d46105cf36600461466c565b6110d6565b6040516103bd9190614b1a565b3480156105ed57600080fd5b50610473601c5481565b34801561060357600080fd5b50610440610612366004614684565b6110f3565b34801561062357600080fd5b506103b161063236600461452a565b611115565b34801561064357600080fd5b50610440611158565b34801561065857600080fd5b5061044061066736600461452a565b611200565b34801561067857600080fd5b5061044061068736600461466c565b61121b565b34801561069857600080fd5b506104406106a73660046147fd565b611295565b3480156106b857600080fd5b506104406106c7366004614753565b6113de565b3480156106d857600080fd5b506104406106e73660046146a8565b61143c565b3480156106f857600080fd5b5061047361070736600461466c565b6114c5565b34801561071857600080fd5b506104406107273660046144c7565b611566565b34801561073857600080fd5b50600160006002825b6040805194855260208501939093529183015260608201526080016103bd565b34801561076d57600080fd5b50610473601b5481565b34801561078357600080fd5b5060105460ff166103b1565b34801561079b57600080fd5b506104086107aa36600461466c565b61160d565b3480156107bb57600080fd5b506104406107ca3660046146a8565b611684565b3480156107db57600080fd5b506104406107ea36600461448f565b61170e565b3480156107fb57600080fd5b5061044061080a36600461448f565b611930565b34801561081b57600080fd5b5061047361082a36600461448f565b6119ec565b34801561083b57600080fd5b5061047361084a36600461466c565b611a73565b34801561085b57600080fd5b506103b161086a36600461466c565b611a87565b34801561087b57600080fd5b5061074161088a366004614701565b611abd565b34801561089b57600080fd5b50610440611b52565b3480156108b057600080fd5b506104086108bf3660046146a8565b611bf6565b3480156108d057600080fd5b506103b16108df366004614684565b611c0e565b3480156108f057600080fd5b506104737f6a4b509b5f306a69ec99e97ff6b166daad9c0a3dfce739a6d67ad1c57143a6b281565b34801561092457600080fd5b506104406109333660046146a8565b611c39565b34801561094457600080fd5b506103db611cbf565b34801561095957600080fd5b5061047361096836600461466c565b60016020526000908152604090205481565b34801561098657600080fd5b50610473600081565b34801561099b57600080fd5b506104406109aa366004614611565b611cce565b3480156109bb57600080fd5b506109df6109ca36600461466c565b60166020526000908152604090205460ff1681565b6040516103bd9190614957565b6104406109fa366004614701565b611d93565b348015610a0b57600080fd5b50610440610a1a36600461456a565b61221d565b348015610a2b57600080fd5b506103db610a3a36600461466c565b612255565b348015610a4b57600080fd5b50610473610a5a36600461466c565b61231f565b348015610a6b57600080fd5b506105d4610a7a36600461466c565b604080518082019091526000808252602082015250600090815260036020908152604091829020825180840190935280546001600160a01b03168352600101549082015290565b348015610acd57600080fd5b506104737f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b348015610b0157600080fd5b50610440610b10366004614684565b612336565b348015610b2157600080fd5b506104737f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a81565b348015610b5557600080fd5b506103db612340565b348015610b6a57600080fd5b506103b1610b793660046144f2565b6001600160a01b039182166000908152600b6020908152604080832093909416825291909152205460ff1690565b348015610bb357600080fd5b506103db610bc236600461466c565b6123ce565b610440610bd53660046147fd565b61252b565b6000610be5826129f3565b92915050565b606060068054610bfa90614c38565b80601f0160208091040260200160405190810160405280929190818152602001828054610c2690614c38565b8015610c735780601f10610c4857610100808354040283529160200191610c73565b820191906000526020600020905b815481529060010190602001808311610c5657829003601f168201915b5050505050905090565b6000610c8882612a18565b610cee5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600a60205260409020546001600160a01b031690565b6000610d158261160d565b9050806001600160a01b0316836001600160a01b03161415610d835760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610ce5565b336001600160a01b0382161480610d9f5750610d9f8133610b79565b610e115760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610ce5565b610e1b8383612a35565b505050565b80610e2a81612a18565b610e465760405162461bcd60e51b8152600401610ce5906149e4565b60026000541415610e695760405162461bcd60e51b8152600401610ce590614ae3565b6002600055610e783383612aa3565b50610e8282612bc6565b50506001600055565b33610e97600082611c0e565b610eb35760405162461bcd60e51b8152600401610ce590614a30565b84600a81600a811115610ed657634e487b7160e01b600052602160045260246000fd5b1115610ef45760405162461bcd60e51b8152600401610ce590614aac565b600081600a811115610f1657634e487b7160e01b600052602160045260246000fd5b1015610f345760405162461bcd60e51b8152600401610ce590614aac565b60006014600088600a811115610f5a57634e487b7160e01b600052602160045260246000fd5b600a811115610f7957634e487b7160e01b600052602160045260246000fd5b8152602081019190915260400160002086815560018101869055600281018590559050845b610fa88587614b93565b811015610fcf57610fbc6003830182612bd2565b5080610fc781614c73565b915050610f9e565b5050505050505050565b610fe4335b82612bde565b6110005760405162461bcd60e51b8152600401610ce590614a5b565b610e1b838383612c7f565b61101582826127eb565b6000828152600560205260409020610e1b90826127d6565b6000611038836119ec565b821061109a5760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b6064820152608401610ce5565b506001600160a01b03919091166000908152600c60209081526040808320938352929052205490565b60006110cf8383612e2a565b9392505050565b6040805180820190915260008082526020820152610be582612e4f565b6110fd8282612e96565b6000828152600560205260409020610e1b9082612f10565b60008061112184612f25565b1561113457611131858585612fa7565b90505b61113d84613043565b156111505761114d858585613079565b90505b949350505050565b6111827f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a33611c0e565b6111f6576040805162461bcd60e51b81526020600482015260248101919091527f4552433732315072657365744d696e7465725061757365724175746f49643a2060448201527f6d75737420686176652070617573657220726f6c6520746f20756e70617573656064820152608401610ce5565b6111fe613105565b565b610e1b8383836040518060200160405280600081525061221d565b61122433610fde565b6112895760405162461bcd60e51b815260206004820152603060248201527f4552433732314275726e61626c653a2063616c6c6572206973206e6f74206f7760448201526f1b995c881b9bdc88185c1c1c9bdd995960821b6064820152608401610ce5565b61129281613198565b50565b8261129f81612a18565b6112bb5760405162461bcd60e51b8152600401610ce5906149e4565b336040516307b60f9760e31b81526001600160a01b0380831660048301528516602482015260448101849052849084903090633db07cb89060640160206040518083038186803b15801561130e57600080fd5b505afa158015611322573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113469190614650565b6113925760405162461bcd60e51b815260206004820152601860248201527f4672616d653a2045786869626974206e6f742076616c696400000000000000006044820152606401610ce5565b600260005414156113b55760405162461bcd60e51b8152600401610ce590614ae3565b60026000556113c43388612aa3565b506113d087878761323f565b505060016000555050505050565b336113ea600082611c0e565b6114065760405162461bcd60e51b8152600401610ce590614a30565b601a805483919060ff1916600183600281111561143357634e487b7160e01b600052602160045260246000fd5b02179055505050565b33611448600082611c0e565b6114645760405162461bcd60e51b8152600401610ce590614a30565b601b8054601c8054928690558490556040805182815260208101849052908101869052606081018590529091907fc2ac79bee6d1ed17598c0a9e971d185df3f02d421356e70c34d4f4855f4983379060800160405180910390a15050505050565b60006114d0600e5490565b82106115335760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b6064820152608401610ce5565b600e828154811061155457634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050919050565b33611572600082611c0e565b61158e5760405162461bcd60e51b8152600401610ce590614a30565b600260005414156115b15760405162461bcd60e51b8152600401610ce590614ae3565b60026000556115c083836132af565b826001600160a01b03167f06097061aeda806b5e9cb4133d9899f332ff0913956567fc0f7ea15e3d19947c836040516115fb91815260200190565b60405180910390a25050600160005550565b6000818152600860205260408120546001600160a01b031680610be55760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401610ce5565b8161168e81612a18565b6116aa5760405162461bcd60e51b8152600401610ce5906149e4565b82336116b68282613352565b6116f95760405162461bcd60e51b8152602060048201526014602482015273233930b6b29d102737ba103a34329027bbb732b960611b6044820152606401610ce5565b50505060009182526001602052604090912055565b3361171a600082611c0e565b6117365760405162461bcd60e51b8152600401610ce590614a30565b600260005414156117595760405162461bcd60e51b8152600401610ce590614ae3565b600260009081556040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b1580156117bf57600080fd5b505afa1580156117d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117f791906147e5565b90506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663a9059cbb336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260248101849052604401602060405180830381600087803b15801561187157600080fd5b505af1158015611885573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118a99190614650565b6118f55760405162461bcd60e51b815260206004820152601960248201527f4672616d653a204572726f722073656e64696e67204c494e4b000000000000006044820152606401610ce5565b826001600160a01b03167fcb1436249a1dd8cf93362c28d79a4e20dc54398b6c49e30316e8396e72a584b0826040516115fb91815260200190565b61195a7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a633611c0e565b6119cc5760405162461bcd60e51b815260206004820152603d60248201527f4552433732315072657365744d696e7465725061757365724175746f49643a2060448201527f6d7573742068617665206d696e74657220726f6c6520746f206d696e740000006064820152608401610ce5565b6119de816119d960115490565b613379565b611292601180546001019055565b60006001600160a01b038216611a575760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610ce5565b506001600160a01b031660009081526009602052604090205490565b600081815260016020526040812054610be5565b6000818152600260209081526040808320815180830190925280546001600160a01b031682526001015491018190524310610be5565b60008060008060006014600087600a811115611ae957634e487b7160e01b600052602160045260246000fd5b600a811115611b0857634e487b7160e01b600052602160045260246000fd5b815260200190815260200160002090506000611b26826003016134b8565b8260020154611b359190614bde565b825460018401546002909401549099939850965094509092505050565b611b7c7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a33611c0e565b611bee5760405162461bcd60e51b815260206004820152603e60248201527f4552433732315072657365744d696e7465725061757365724175746f49643a2060448201527f6d75737420686176652070617573657220726f6c6520746f20706175736500006064820152608401610ce5565b6111fe6134c2565b60008281526005602052604081206110cf908361353d565b60009182526004602090815260408084206001600160a01b0393909316845291905290205460ff1690565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614611cb15760405162461bcd60e51b815260206004820152601f60248201527f4f6e6c7920565246436f6f7264696e61746f722063616e2066756c66696c6c006044820152606401610ce5565b611cbb8282613549565b5050565b606060078054610bfa90614c38565b6001600160a01b038216331415611d275760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610ce5565b336000818152600b602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6000601a5460ff166002811115611dba57634e487b7160e01b600052602160045260246000fd5b1415611e085760405162461bcd60e51b815260206004820152601c60248201527f4672616d653a204d696e74696e67206e6f7420617661696c61626c65000000006044820152606401610ce5565b80600a81600a811115611e2b57634e487b7160e01b600052602160045260246000fd5b1115611e495760405162461bcd60e51b8152600401610ce590614aac565b600081600a811115611e6b57634e487b7160e01b600052602160045260246000fd5b1015611e895760405162461bcd60e51b8152600401610ce590614aac565b60026000541415611eac5760405162461bcd60e51b8152600401610ce590614ae3565b600260005560105460ff1615611ef75760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610ce5565b6001601a5460ff166002811115611f1e57634e487b7160e01b600052602160045260246000fd5b1415611f9a57611f4e7f6a4b509b5f306a69ec99e97ff6b166daad9c0a3dfce739a6d67ad1c57143a6b233611c0e565b611f9a5760405162461bcd60e51b815260206004820152601a60248201527f4672616d653a2041646472657373206e6f74206f6e206c6973740000000000006044820152606401610ce5565b60006014600084600a811115611fc057634e487b7160e01b600052602160045260246000fd5b600a811115611fdf57634e487b7160e01b600052602160045260246000fd5b815260200190815260200160002090506000611ffd826003016134b8565b1161203c5760405162461bcd60e51b815260206004820152600f60248201526e119c985b594e8814dbdb19081bdd5d608a1b6044820152606401610ce5565b8054341461209a5760405162461bcd60e51b815260206004820152602560248201527f4672616d653a20496e636f7272656374207061796d656e7420666f722063617460448201526465676f727960d81b6064820152608401610ce5565b6019546040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b1580156120fc57600080fd5b505afa158015612110573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061213491906147e5565b101561217b5760405162461bcd60e51b81526020600482015260166024820152754672616d653a204e6f7420656e6f756768204c494e4b60501b6044820152606401610ce5565b600061218b601854601954613679565b600081815260156020908152604080832080546001600160a01b03191633179055601690915290208054919250859160ff1916600183600a8111156121e057634e487b7160e01b600052602160045260246000fd5b0217905550604051339082907f9d03d5e4e11627bacfb2a3a993b2f9923c66e8cb86c1c3a6bca45fc876590d7890600090a3505060016000555050565b6122273383612bde565b6122435760405162461bcd60e51b8152600401610ce590614a5b565b61224f84848484613804565b50505050565b606061226082612a18565b6122c45760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b6064820152608401610ce5565b60006122ce613837565b905060008151116122ee57604051806020016040528060008152506110cf565b806122f884613846565b60405160200161230992919061484f565b6040516020818303038152906040529392505050565b6000818152600560205260408120610be5906134b8565b6110fd8282613960565b601d805461234d90614c38565b80601f016020809104026020016040519081016040528092919081815260200182805461237990614c38565b80156123c65780601f1061239b576101008083540402835291602001916123c6565b820191906000526020600020905b8154815290600101906020018083116123a957829003601f168201915b505050505081565b600081815260036020526040902080546060919082906123f6906001600160a01b0316612f25565b15612488578154600183015460405163c87b56dd60e01b81526001600160a01b039092169163c87b56dd916124319160040190815260200190565b60006040518083038186803b15801561244957600080fd5b505afa15801561245d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526124859190810190614772565b90505b815461249c906001600160a01b0316613043565b156110cf57815460018301546040516303a24d0760e21b81526001600160a01b0390921691630e89341c916124d79160040190815260200190565b60006040518083038186803b1580156124ef57600080fd5b505afa158015612503573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526111509190810190614772565b8261253581612a18565b6125515760405162461bcd60e51b8152600401610ce5906149e4565b600084815260026020908152604091829020825180840190935280546001600160a01b0316835260010154910181905284904310156125d25760405162461bcd60e51b815260206004820152601b60248201527f4672616d653a20546f6b656e20616c72656164792072656e74656400000000006044820152606401610ce5565b604051631f9c3df360e21b81526004810186905285906000903090637e70f7cc9060240160206040518083038186803b15801561260e57600080fd5b505afa158015612622573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061264691906147e5565b116126935760405162461bcd60e51b815260206004820152601b60248201527f4672616d653a2052656e74616c207072696365206e6f742073657400000000006044820152606401610ce5565b600260005414156126b65760405162461bcd60e51b8152600401610ce590614ae3565b6002600090815586815260016020526040812054906126d58287614bbf565b90508034146127265760405162461bcd60e51b815260206004820152601860248201527f4672616d653a20496e636f7272656374207061796d656e7400000000000000006044820152606401610ce5565b6000612736601b54601c54613986565b905060006127448284613a22565b905060006127518b61160d565b9050806001600160a01b03168b7ff589aa97ce865d224468fd0f94ceffe274703183477aeea987d264ec825d289d8460405161278f91815260200190565b60405180910390a36127a18285614bde565b9350806127ae81866132af565b6127b98c8c8c613a8a565b5050600160005550505050505050505050565b611cbb8282613b00565b60006110cf836001600160a01b038416613b86565b6000828152600460205260409020600101546128078133613bd5565b610e1b8383613b00565b60606000612820836002614bbf565b61282b906002614b93565b67ffffffffffffffff81111561285157634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561287b576020820181803683370190505b509050600360fc1b816000815181106128a457634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106128e157634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053506000612905846002614bbf565b612910906001614b93565b90505b60018111156129a4576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061295257634e487b7160e01b600052603260045260246000fd5b1a60f81b82828151811061297657634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c9361299d81614c21565b9050612913565b5083156110cf5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610ce5565b60006001600160e01b0319821663780e9d6360e01b1480610be55750610be582613c39565b6000908152600860205260409020546001600160a01b0316151590565b6000818152600a6020526040902080546001600160a01b0319166001600160a01b0384169081179091558190612a6a8261160d565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b604051637eaf765960e01b8152600481018290526000903090637eaf76599060240160206040518083038186803b158015612add57600080fd5b505afa158015612af1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b159190614650565b15612b74576000612b268385612e2a565b905080612b6d5760405162461bcd60e51b8152602060048201526015602482015274233930b6b29d102737ba103a3432902932b73a32b960591b6044820152606401610ce5565b9050610be5565b6000612b808385613352565b905080612b6d5760405162461bcd60e51b8152602060048201526014602482015273233930b6b29d102737ba103a34329027bbb732b960611b6044820152606401610ce5565b6112928160008061323f565b60006110cf8383613b86565b6000612be982612a18565b612c055760405162461bcd60e51b8152600401610ce5906149e4565b6000612c108361160d565b9050806001600160a01b0316846001600160a01b03161480612c4b5750836001600160a01b0316612c4084610c7d565b6001600160a01b0316145b8061115057506001600160a01b038082166000908152600b602090815260408083209388168352929052205460ff16611150565b826001600160a01b0316612c928261160d565b6001600160a01b031614612cfa5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b6064820152608401610ce5565b6001600160a01b038216612d5c5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610ce5565b612d67838383613c79565b612d72600082612a35565b6001600160a01b0383166000908152600960205260408120805460019290612d9b908490614bde565b90915550506001600160a01b0382166000908152600960205260408120805460019290612dc9908490614b93565b909155505060008181526008602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600080612e3684612e4f565b516001600160a01b039081169084161491505092915050565b604080518082019091526000808252602082015250600090815260026020908152604091829020825180840190935280546001600160a01b03168352600101549082015290565b6001600160a01b0381163314612f065760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610ce5565b611cbb8282613c84565b60006110cf836001600160a01b038416613ceb565b6040516301ffc9a760e01b81526380ac58cd60e01b60048201526000906001600160a01b038316906301ffc9a7906024015b60206040518083038186803b158015612f6f57600080fd5b505afa158015612f83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610be59190614650565b6000836001600160a01b0316836001600160a01b0316636352211e846040518263ffffffff1660e01b8152600401612fe191815260200190565b60206040518083038186803b158015612ff957600080fd5b505afa15801561300d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061303191906144ab565b6001600160a01b031614949350505050565b6040516301ffc9a760e01b8152636cdb3d1360e11b60048201526000906001600160a01b038316906301ffc9a790602401612f57565b604051627eeac760e11b81526001600160a01b03848116600483015260248201839052600091829185169062fdd58e9060440160206040518083038186803b1580156130c457600080fd5b505afa1580156130d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130fc91906147e5565b11949350505050565b60105460ff1661314e5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610ce5565b6010805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b60006131a38261160d565b90506131b181600084613c79565b6131bc600083612a35565b6001600160a01b03811660009081526009602052604081208054600192906131e5908490614bde565b909155505060008281526008602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b60008381526003602090815260409182902080546001600160a01b0319166001600160a01b038616908117825560018201859055925184815290929186917f845ee41542a753bb1bf9f17c3d2930fd16349a29332893bc06569e4e9f5f46b391015b60405180910390a350505050565b6000826001600160a01b03168260405160006040518083038185875af1925050503d80600081146132fc576040519150601f19603f3d011682016040523d82523d6000602084013e613301565b606091505b5050905080610e1b5760405162461bcd60e51b815260206004820152601960248201527f4672616d653a204661696c656420746f2073656e6420455448000000000000006044820152606401610ce5565b600061335d8361160d565b6001600160a01b0316826001600160a01b031614905092915050565b6001600160a01b0382166133cf5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610ce5565b6133d881612a18565b156134255760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610ce5565b61343160008383613c79565b6001600160a01b038216600090815260096020526040812080546001929061345a908490614b93565b909155505060008181526008602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6000610be5825490565b60105460ff16156135085760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610ce5565b6010805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861317b3390565b60006110cf8383613e08565b60008281526015602090815260408083205460169092528220546001600160a01b039091169190601490829060ff16600a81111561359757634e487b7160e01b600052602160045260246000fd5b600a8111156135b657634e487b7160e01b600052602160045260246000fd5b8152602001908152602001600020905060006135d4826003016134b8565b9050600060018211156135ff576135f86135ee8387614c8e565b600385019061353d565b9050613610565b61360d60038401600061353d565b90505b61361d6003840182613e40565b5060008681526017602052604090208190556136398482613e4c565b80846001600160a01b0316877f98b595a980d0cccd434684fb987af818dc227293514b685567789f969a0ff11660405160405180910390a4505050505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316634000aea07f0000000000000000000000000000000000000000000000000000000000000000848660006040516020016136e9929190918252602082015260400190565b6040516020818303038152906040526040518463ffffffff1660e01b815260040161371693929190614930565b602060405180830381600087803b15801561373057600080fd5b505af1158015613744573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137689190614650565b50600083815260136020818152604080842054815180840189905280830186905230606082015260808082018390528351808303909101815260a0909101909252815191830191909120938790529190526137c4906001614b93565b6000858152601360205260409020556111508482604080516020808201949094528082019290925280518083038201815260609092019052805191012090565b61380f848484612c7f565b61381b84848484613e66565b61224f5760405162461bcd60e51b8152600401610ce590614992565b606060128054610bfa90614c38565b60608161386a5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115613894578061387e81614c73565b915061388d9050600a83614bab565b915061386e565b60008167ffffffffffffffff8111156138bd57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156138e7576020820181803683370190505b5090505b8415611150576138fc600183614bde565b9150613909600a86614c8e565b613914906030614b93565b60f81b81838151811061393757634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350613959600a86614bab565b94506138eb565b60008281526004602052604090206001015461397c8133613bd5565b610e1b8383613c84565b60008161399257600080fd5b6000808412156139a757836000039350600190505b60008312156139b95760009290920391155b60006139c58585613f70565b905081156139f3576001607f1b816001600160801b031611156139e757600080fd5b6000039150610be59050565b6f7fffffffffffffffffffffffffffffff816001600160801b03161115613a1957600080fd5b9150610be59050565b600081613a3157506000610be5565b600083600f0b1215613a4257600080fd5b600f83900b6001600160801b038316810260401c90608084901c026001600160c01b03811115613a7157600080fd5b60401b8119811115613a8257600080fd5b019392505050565b600083815260026020526040902080546001600160a01b0319166001600160a01b038416178155613abb8243614b93565b6001820181905581546040519182526001600160a01b03169085907fed30b68a6b75846b1f125f61bee0f445ff34e5b5f127eda7d4ebb9634b16922e906020016132a1565b613b0a8282611c0e565b611cbb5760008281526004602090815260408083206001600160a01b03851684529091529020805460ff19166001179055613b423390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000818152600183016020526040812054613bcd57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610be5565b506000610be5565b613bdf8282611c0e565b611cbb57613bf7816001600160a01b03166014612811565b613c02836020612811565b604051602001613c1392919061487e565b60408051601f198184030181529082905262461bcd60e51b8252610ce59160040161497f565b60006001600160e01b031982166380ac58cd60e01b1480613c6a57506001600160e01b03198216635b5e139f60e01b145b80610be55750610be58261410a565b610e1b83838361412f565b613c8e8282611c0e565b15611cbb5760008281526004602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60008181526001830160205260408120548015613dfe576000613d0f600183614bde565b8554909150600090613d2390600190614bde565b9050818114613da4576000866000018281548110613d5157634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905080876000018481548110613d8257634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910192909255918252600188019052604090208390555b8554869080613dc357634e487b7160e01b600052603160045260246000fd5b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610be5565b6000915050610be5565b6000826000018281548110613e2d57634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905092915050565b60006110cf8383613ceb565b611cbb8282604051806020016040528060008152506141a1565b60006001600160a01b0384163b15613f6857604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290613eaa9033908990889088906004016148f3565b602060405180830381600087803b158015613ec457600080fd5b505af1925050508015613ef4575060408051601f3d908101601f19168201909252613ef1918101906146e5565b60015b613f4e573d808015613f22576040519150601f19603f3d011682016040523d82523d6000602084013e613f27565b606091505b508051613f465760405162461bcd60e51b8152600401610ce590614992565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611150565b506001611150565b600081613f7c57600080fd5b60006001600160c01b038411613fb55782604085901b81613fad57634e487b7160e01b600052601260045260246000fd5b0490506140f6565b60c084811c6401000000008110613fce576020918201911c5b620100008110613fe0576010918201911c5b6101008110613ff1576008918201911c5b60108110614001576004918201911c5b60048110614011576002918201911c5b60028110614020576001820191505b60bf820360018603901c6001018260ff0387901b8161404f57634e487b7160e01b600052601260045260246000fd5b0492506001600160801b0383111561406657600080fd5b608085901c83026001600160801b038616840260c088901c604089901b82811015614092576001820391505b608084901b929003828110156140a9576001820391505b829003608084901c82146140cd57634e487b7160e01b600052600160045260246000fd5b8881816140ea57634e487b7160e01b600052601260045260246000fd5b04870196505050505050505b6001600160801b038111156110cf57600080fd5b60006001600160e01b03198216635a05180f60e01b1480610be55750610be5826141d4565b61413a838383614209565b60105460ff1615610e1b5760405162461bcd60e51b815260206004820152602b60248201527f4552433732315061757361626c653a20746f6b656e207472616e73666572207760448201526a1a1a5b19481c185d5cd95960aa1b6064820152608401610ce5565b6141ab8383613379565b6141b86000848484613e66565b610e1b5760405162461bcd60e51b8152600401610ce590614992565b60006001600160e01b03198216637965db0b60e01b1480610be557506301ffc9a760e01b6001600160e01b0319831614610be5565b6001600160a01b0383166142645761425f81600e80546000838152600f60205260408120829055600182018355919091527fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fd0155565b614287565b816001600160a01b0316836001600160a01b0316146142875761428783826142c1565b6001600160a01b03821661429e57610e1b8161435e565b826001600160a01b0316826001600160a01b031614610e1b57610e1b8282614437565b600060016142ce846119ec565b6142d89190614bde565b6000838152600d602052604090205490915080821461432b576001600160a01b0384166000908152600c602090815260408083208584528252808320548484528184208190558352600d90915290208190555b506000918252600d602090815260408084208490556001600160a01b039094168352600c81528383209183525290812055565b600e5460009061437090600190614bde565b6000838152600f6020526040812054600e80549394509092849081106143a657634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905080600e83815481106143d557634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910192909255828152600f9091526040808220849055858252812055600e80548061441b57634e487b7160e01b600052603160045260246000fd5b6001900381819060005260206000200160009055905550505050565b6000614442836119ec565b6001600160a01b039093166000908152600c602090815260408083208684528252808320859055938252600d9052919091209190915550565b8035600b811061448a57600080fd5b919050565b6000602082840312156144a0578081fd5b81356110cf81614ce4565b6000602082840312156144bc578081fd5b81516110cf81614ce4565b600080604083850312156144d9578081fd5b82356144e481614ce4565b946020939093013593505050565b60008060408385031215614504578182fd5b823561450f81614ce4565b9150602083013561451f81614ce4565b809150509250929050565b60008060006060848603121561453e578081fd5b833561454981614ce4565b9250602084013561455981614ce4565b929592945050506040919091013590565b6000806000806080858703121561457f578081fd5b843561458a81614ce4565b9350602085013561459a81614ce4565b925060408501359150606085013567ffffffffffffffff8111156145bc578182fd5b8501601f810187136145cc578182fd5b80356145df6145da82614b6b565b614b3a565b8181528860208385010111156145f3578384fd5b81602084016020830137908101602001929092525092959194509250565b60008060408385031215614623578182fd5b823561462e81614ce4565b9150602083013561451f81614cf9565b600080604083850312156144d9578182fd5b600060208284031215614661578081fd5b81516110cf81614cf9565b60006020828403121561467d578081fd5b5035919050565b60008060408385031215614696578182fd5b82359150602083013561451f81614ce4565b600080604083850312156146ba578182fd5b50508035926020909101359150565b6000602082840312156146da578081fd5b81356110cf81614d07565b6000602082840312156146f6578081fd5b81516110cf81614d07565b600060208284031215614712578081fd5b6110cf8261447b565b60008060008060808587031215614730578182fd5b6147398561447b565b966020860135965060408601359560600135945092505050565b600060208284031215614764578081fd5b8135600381106110cf578182fd5b600060208284031215614783578081fd5b815167ffffffffffffffff811115614799578182fd5b8201601f810184136147a9578182fd5b80516147b76145da82614b6b565b8181528560208385010111156147cb578384fd5b6147dc826020830160208601614bf5565b95945050505050565b6000602082840312156147f6578081fd5b5051919050565b600080600060608486031215614811578081fd5b83359250602084013561455981614ce4565b6000815180845261483b816020860160208601614bf5565b601f01601f19169290920160200192915050565b60008351614861818460208801614bf5565b835190830190614875818360208801614bf5565b01949350505050565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516148b6816017850160208801614bf5565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516148e7816028840160208801614bf5565b01602801949350505050565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061492690830184614823565b9695505050505050565b60018060a01b03841681528260208201526060604082015260006147dc6060830184614823565b60208101600b831061497957634e487b7160e01b600052602160045260246000fd5b91905290565b6020815260006110cf6020830184614823565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6020808252602c908201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860408201526b34b9ba32b73a103a37b5b2b760a11b606082015260800190565b602080825260119082015270233930b6b29d1027b7363c9037bbb732b960791b604082015260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b60208082526017908201527f4672616d653a20496e76616c69642043617465676f7279000000000000000000604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b81516001600160a01b031681526020808301519082015260408101610be5565b604051601f8201601f1916810167ffffffffffffffff81118282101715614b6357614b63614cce565b604052919050565b600067ffffffffffffffff821115614b8557614b85614cce565b50601f01601f191660200190565b60008219821115614ba657614ba6614ca2565b500190565b600082614bba57614bba614cb8565b500490565b6000816000190483118215151615614bd957614bd9614ca2565b500290565b600082821015614bf057614bf0614ca2565b500390565b60005b83811015614c10578181015183820152602001614bf8565b8381111561224f5750506000910152565b600081614c3057614c30614ca2565b506000190190565b600181811c90821680614c4c57607f821691505b60208210811415614c6d57634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415614c8757614c87614ca2565b5060010190565b600082614c9d57614c9d614cb8565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461129257600080fd5b801515811461129257600080fd5b6001600160e01b03198116811461129257600080fdfea264697066735822122075a8532b4c640fb7cb2a78356c7720519d17dbd53ec34d918a4f3397bed5981064736f6c63430008040033",
  "libraries": {
    "ABDKMath64x64": "0x7F654841a02752b90db5aaea68631fD099c63c4c",
    "AllowList": "0x9c47fCcfE2add2311192cB91981348952B1e654E"
  },
  "devdoc": {
    "author": "Aaron Boyd <https://github.com/aaronmboyd>",
    "details": "ERC-721 compatible token with multiple price categoriesAllows token holders to rent and exhibit other NFTs inside the FrameUses Chainlink VRF function to select minting within a price categoryImplements a basic pre-sale list using AccessControl roles configured during deployImplements ABDK math library for percentage-based fees arithmetic",
    "events": {
      "EtherWithdrawn(address,uint256)": {
        "params": {
          "_to": "Recipient of the ether",
          "_value": "Withdrawal amount in wei"
        }
      },
      "LinkWithdrawn(address,uint256)": {
        "params": {
          "_to": "Recipient of the LINK",
          "_value": "Withdrawal amount in wei"
        }
      },
      "MintFulfilled(bytes32,address,uint256)": {
        "params": {
          "_address": "Recipient address",
          "_requestId": "Request ID of the fulfillment",
          "_tokenId": "TokenID received"
        }
      },
      "MintRequest(bytes32,address)": {
        "params": {
          "_address": "Recipient address",
          "_requestId": "Request ID of the request"
        }
      },
      "RentalFeeCollectedFrom(uint256,address,uint256)": {
        "params": {
          "_from": "Frame owner",
          "_tokenId": "Token id that was rented",
          "_value": "Rental fee collected"
        }
      },
      "RentalFeeUpdated(int256,int256,int256,int256)": {
        "params": {
          "_newDenominator": "New denominator",
          "_newNumerator": "New numerator",
          "_oldDenominator": "Old denominator",
          "_oldNumerator": "Old numerator"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "burn(uint256)": {
        "details": "Burns `tokenId`. See {ERC721-_burn}. Requirements: - The caller must own `tokenId` or be an approved operator."
      },
      "clearExhibit(uint256)": {
        "params": {
          "_tokenId": "The token identifier of the exhibit"
        }
      },
      "constructor": {
        "details": "Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE` and `PAUSER_ROLE` to the account that deploys the contract"
      },
      "exhibitIsOwnedBy(address,address,uint256)": {
        "params": {
          "_exhibitContractAddress": "The new exhibit contract address",
          "_exhibitTokenId": "The token identifier of the exhibit",
          "_exhibitor": "Exhibitor claiming ownership"
        }
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "getCategoryDetail(uint8)": {
        "params": {
          "_category": "The Category to retrieve"
        },
        "returns": {
          "_0": "uint256 The price of the Category in wei",
          "_1": "uint256 The startingTokenId of the Category",
          "_2": "uint256 The total supply of the Category",
          "_3": "uint256 The remaining supply of the Category"
        }
      },
      "getExhibit(uint256)": {
        "params": {
          "_tokenId": "The token identifier of the exhibit"
        }
      },
      "getExhibitTokenURI(uint256)": {
        "params": {
          "_tokenId": "The token identifier of the exhibit"
        }
      },
      "getRentalPricePerBlock(uint256)": {
        "params": {
          "_tokenId": "Token identifier which is setting a renter"
        }
      },
      "getRenter(uint256)": {
        "params": {
          "_tokenId": "Token identifier which is setting a renter"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "getVersionNumber()": {
        "returns": {
          "_0": "The storage, major, minor, and patch version of the contract."
        }
      },
      "grantRole(bytes32,address)": {
        "details": "Overload {grantRole} to track enumerable memberships"
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "isCurrentlyRented(uint256)": {
        "params": {
          "_tokenId": "The token to check is rented"
        }
      },
      "mint(address)": {
        "details": "Creates a new token for `to`. Its token ID will be automatically assigned (and available on the emitted {IERC721-Transfer} event), and the token URI autogenerated based on the base URI passed at construction. See {ERC721-_mint}. Requirements: - the caller must have the `MINTER_ROLE`."
      },
      "mintFrame(uint8)": {
        "params": {
          "_category": "Category to mint"
        }
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "pause()": {
        "details": "Pauses all token transfers. See {ERC721Pausable} and {Pausable-_pause}. Requirements: - the caller must have the `PAUSER_ROLE`."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceRole(bytes32,address)": {
        "details": "Overload {renounceRole} to track enumerable memberships"
      },
      "revokeRole(bytes32,address)": {
        "details": "Overload {revokeRole} to track enumerable memberships"
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "setCategoryDetail(uint8,uint256,uint256,uint256)": {
        "params": {
          "_category": "Category to configure",
          "_price": "Price of this category",
          "_startingTokenId": "Starting token ID of the category",
          "_supply": "Number of tokens in this category"
        }
      },
      "setExhibit(uint256,address,uint256)": {
        "params": {
          "_exhibitContractAddress": "The new exhibit contract address",
          "_exhibitTokenId": "The token identifier of the exhibit",
          "_tokenId": "Token identifier which is setting an exhibit"
        }
      },
      "setRentalFee(int256,int256)": {
        "params": {
          "_denominator": "Rental fee denominator",
          "_numerator": "Rental fee numerator"
        }
      },
      "setRentalPricePerBlock(uint256,uint256)": {
        "params": {
          "_rentalPrice": "The rental price per block",
          "_tokenId": "Token identifier which is setting a renter"
        }
      },
      "setRenter(uint256,address,uint256)": {
        "params": {
          "_numberOfBlocks": "The number of blocks to rent for",
          "_renter": "The new renter address",
          "_tokenId": "Token identifier which is setting a renter"
        }
      },
      "setSaleStatus(uint8)": {
        "details": "Possible statuses are the enum SaleStatus",
        "params": {
          "_status": "Status to set"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenIsRentedByAddress(uint256,address)": {
        "params": {
          "_address": "The address to check if it's rented by",
          "_tokenId": "The token to check is rented"
        }
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "unpause()": {
        "details": "Unpauses all token transfers. See {ERC721Pausable} and {Pausable-_unpause}. Requirements: - the caller must have the `PAUSER_ROLE`."
      },
      "withdrawAllLink(address)": {
        "params": {
          "_to": "Address to receive all the LINK"
        }
      },
      "withdrawEther(address,uint256)": {
        "params": {
          "_to": "Address to receive the ether"
        }
      }
    },
    "stateVariables": {
      "PRESALE_ROLE": {
        "details": "Frame variablesFee: defaulted to 0.1 LINK on Rinkeby (varies by network), set during constructorKeyHash: must be set during constructor (varies by network)"
      },
      "categories": {
        "details": "Mappings"
      },
      "contractURI": {
        "details": "ERC721 variables"
      },
      "keyHash": {
        "details": "Chainlink variablesFee: defaulted to 0.1 LINK on Rinkeby (varies by network), set during constructorKeyHash: must be set during constructor (varies by network)"
      }
    },
    "title": "Musee Dezentral Frame NFT contract",
    "version": 1
  },
  "userdoc": {
    "events": {
      "EtherWithdrawn(address,uint256)": {
        "notice": "Triggered when ether is withdrawn"
      },
      "ExhibitSet(uint256,address,uint256)": {
        "notice": "Triggered when a a new exhibit has been set"
      },
      "LinkWithdrawn(address,uint256)": {
        "notice": "Triggered when LINK is withdrawn"
      },
      "MintFulfilled(bytes32,address,uint256)": {
        "notice": "Triggered when a minting is fulfilled"
      },
      "MintRequest(bytes32,address)": {
        "notice": "Triggered when a minting is requested"
      },
      "RentalFeeCollectedFrom(uint256,address,uint256)": {
        "notice": "Triggered when rental fee accumulated in the contract"
      },
      "RentalFeeUpdated(int256,int256,int256,int256)": {
        "notice": "Triggered when the Rental Fee is updated"
      },
      "RenterSet(uint256,address,uint256)": {
        "notice": "Triggered when a renter has been set"
      }
    },
    "kind": "user",
    "methods": {
      "clearExhibit(uint256)": {
        "notice": "Remove the exhibit for a tokenId"
      },
      "constructor": {
        "notice": "Constructor"
      },
      "exhibitIsOwnedBy(address,address,uint256)": {
        "notice": "Return true if the exhibit is owned by exhibtor"
      },
      "getCategoryDetail(uint8)": {
        "notice": "Returns information about a Category"
      },
      "getExhibit(uint256)": {
        "notice": "Get the exhibit for a tokenId"
      },
      "getExhibitTokenURI(uint256)": {
        "notice": "Get the exhibit token URI for a tokenId"
      },
      "getRentalPricePerBlock(uint256)": {
        "notice": "Get the rental price per block for a tokenId"
      },
      "getRenter(uint256)": {
        "notice": "Get a renter for a tokenId"
      },
      "getVersionNumber()": {
        "notice": "Returns the storage, major, minor, and patch version of the contract."
      },
      "isCurrentlyRented(uint256)": {
        "notice": "Checks if a token is currently rented by anyone"
      },
      "mintFrame(uint8)": {
        "notice": "Mint a Frame in a given Category"
      },
      "setCategoryDetail(uint8,uint256,uint256,uint256)": {
        "notice": "Configure a category"
      },
      "setExhibit(uint256,address,uint256)": {
        "notice": "Set an exhibit for a tokenId"
      },
      "setRentalFee(int256,int256)": {
        "notice": "Set rental fee"
      },
      "setRentalPricePerBlock(uint256,uint256)": {
        "notice": "Set the rental price per block for a tokenId"
      },
      "setRenter(uint256,address,uint256)": {
        "notice": "Set a renter for a tokenId"
      },
      "setSaleStatus(uint8)": {
        "notice": "Set the status of the sale"
      },
      "tokenIsRentedByAddress(uint256,address)": {
        "notice": "Checks if a token is currently rented by address"
      },
      "withdrawAllLink(address)": {
        "notice": "Withdraws all LINK token from this contract"
      },
      "withdrawEther(address,uint256)": {
        "notice": "Withdraws an amount of ether from this contract"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1056,
        "contract": "contracts/Frame.sol:Frame",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 7734,
        "contract": "contracts/Frame.sol:Frame",
        "label": "_rentalPrices",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 7739,
        "contract": "contracts/Frame.sol:Frame",
        "label": "_renters",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_struct(Rental)8005_storage)"
      },
      {
        "astId": 7465,
        "contract": "contracts/Frame.sol:Frame",
        "label": "_exhibits",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(Exhibit)7943_storage)"
      },
      {
        "astId": 290,
        "contract": "contracts/Frame.sol:Frame",
        "label": "_roles",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)285_storage)"
      },
      {
        "astId": 591,
        "contract": "contracts/Frame.sol:Frame",
        "label": "_roleMembers",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_bytes32,t_struct(AddressSet)6088_storage)"
      },
      {
        "astId": 3569,
        "contract": "contracts/Frame.sol:Frame",
        "label": "_name",
        "offset": 0,
        "slot": "6",
        "type": "t_string_storage"
      },
      {
        "astId": 3571,
        "contract": "contracts/Frame.sol:Frame",
        "label": "_symbol",
        "offset": 0,
        "slot": "7",
        "type": "t_string_storage"
      },
      {
        "astId": 3575,
        "contract": "contracts/Frame.sol:Frame",
        "label": "_owners",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 3579,
        "contract": "contracts/Frame.sol:Frame",
        "label": "_balances",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3583,
        "contract": "contracts/Frame.sol:Frame",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 3589,
        "contract": "contracts/Frame.sol:Frame",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 4538,
        "contract": "contracts/Frame.sol:Frame",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 4542,
        "contract": "contracts/Frame.sol:Frame",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 4545,
        "contract": "contracts/Frame.sol:Frame",
        "label": "_allTokens",
        "offset": 0,
        "slot": "14",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 4549,
        "contract": "contracts/Frame.sol:Frame",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 971,
        "contract": "contracts/Frame.sol:Frame",
        "label": "_paused",
        "offset": 0,
        "slot": "16",
        "type": "t_bool"
      },
      {
        "astId": 4993,
        "contract": "contracts/Frame.sol:Frame",
        "label": "_tokenIdTracker",
        "offset": 0,
        "slot": "17",
        "type": "t_struct(Counter)5469_storage"
      },
      {
        "astId": 4995,
        "contract": "contracts/Frame.sol:Frame",
        "label": "_baseTokenURI",
        "offset": 0,
        "slot": "18",
        "type": "t_string_storage"
      },
      {
        "astId": 79,
        "contract": "contracts/Frame.sol:Frame",
        "label": "nonces",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 6436,
        "contract": "contracts/Frame.sol:Frame",
        "label": "categories",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_enum(Category)6419,t_struct(CategoryDetail)6429_storage)"
      },
      {
        "astId": 6440,
        "contract": "contracts/Frame.sol:Frame",
        "label": "requestIdToSender",
        "offset": 0,
        "slot": "21",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 6445,
        "contract": "contracts/Frame.sol:Frame",
        "label": "requestIdToCategory",
        "offset": 0,
        "slot": "22",
        "type": "t_mapping(t_bytes32,t_enum(Category)6419)"
      },
      {
        "astId": 6449,
        "contract": "contracts/Frame.sol:Frame",
        "label": "requestIdToTokenId",
        "offset": 0,
        "slot": "23",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 6452,
        "contract": "contracts/Frame.sol:Frame",
        "label": "keyHash",
        "offset": 0,
        "slot": "24",
        "type": "t_bytes32"
      },
      {
        "astId": 6459,
        "contract": "contracts/Frame.sol:Frame",
        "label": "fee",
        "offset": 0,
        "slot": "25",
        "type": "t_uint256"
      },
      {
        "astId": 6470,
        "contract": "contracts/Frame.sol:Frame",
        "label": "saleStatus",
        "offset": 0,
        "slot": "26",
        "type": "t_enum(SaleStatus)6407"
      },
      {
        "astId": 6473,
        "contract": "contracts/Frame.sol:Frame",
        "label": "rentalFeeNumerator",
        "offset": 0,
        "slot": "27",
        "type": "t_int256"
      },
      {
        "astId": 6476,
        "contract": "contracts/Frame.sol:Frame",
        "label": "rentalFeeDenominator",
        "offset": 0,
        "slot": "28",
        "type": "t_int256"
      },
      {
        "astId": 6479,
        "contract": "contracts/Frame.sol:Frame",
        "label": "contractURI",
        "offset": 0,
        "slot": "29",
        "type": "t_string_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(Category)6419": {
        "encoding": "inplace",
        "label": "enum Frame.Category",
        "numberOfBytes": "1"
      },
      "t_enum(SaleStatus)6407": {
        "encoding": "inplace",
        "label": "enum Frame.SaleStatus",
        "numberOfBytes": "1"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_bytes32,t_enum(Category)6419)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => enum Frame.Category)",
        "numberOfBytes": "32",
        "value": "t_enum(Category)6419"
      },
      "t_mapping(t_bytes32,t_struct(AddressSet)6088_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)6088_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)285_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)285_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_enum(Category)6419,t_struct(CategoryDetail)6429_storage)": {
        "encoding": "mapping",
        "key": "t_enum(Category)6419",
        "label": "mapping(enum Frame.Category => struct Frame.CategoryDetail)",
        "numberOfBytes": "32",
        "value": "t_struct(CategoryDetail)6429_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(Exhibit)7943_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IExhibitionable.Exhibit)",
        "numberOfBytes": "32",
        "value": "t_struct(Exhibit)7943_storage"
      },
      "t_mapping(t_uint256,t_struct(Rental)8005_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IRentable.Rental)",
        "numberOfBytes": "32",
        "value": "t_struct(Rental)8005_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)6088_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 6087,
            "contract": "contracts/Frame.sol:Frame",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)5787_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(CategoryDetail)6429_storage": {
        "encoding": "inplace",
        "label": "struct Frame.CategoryDetail",
        "members": [
          {
            "astId": 6421,
            "contract": "contracts/Frame.sol:Frame",
            "label": "price",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 6423,
            "contract": "contracts/Frame.sol:Frame",
            "label": "startingTokenId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 6425,
            "contract": "contracts/Frame.sol:Frame",
            "label": "supply",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 6428,
            "contract": "contracts/Frame.sol:Frame",
            "label": "tokenIds",
            "offset": 0,
            "slot": "3",
            "type": "t_struct(UintSet)6245_storage"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(Counter)5469_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 5468,
            "contract": "contracts/Frame.sol:Frame",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Exhibit)7943_storage": {
        "encoding": "inplace",
        "label": "struct IExhibitionable.Exhibit",
        "members": [
          {
            "astId": 7940,
            "contract": "contracts/Frame.sol:Frame",
            "label": "contractAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 7942,
            "contract": "contracts/Frame.sol:Frame",
            "label": "tokenId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Rental)8005_storage": {
        "encoding": "inplace",
        "label": "struct IRentable.Rental",
        "members": [
          {
            "astId": 8002,
            "contract": "contracts/Frame.sol:Frame",
            "label": "renter",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 8004,
            "contract": "contracts/Frame.sol:Frame",
            "label": "rentalExpiryBlock",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)285_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 282,
            "contract": "contracts/Frame.sol:Frame",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 284,
            "contract": "contracts/Frame.sol:Frame",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)5787_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 5782,
            "contract": "contracts/Frame.sol:Frame",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 5786,
            "contract": "contracts/Frame.sol:Frame",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UintSet)6245_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.UintSet",
        "members": [
          {
            "astId": 6244,
            "contract": "contracts/Frame.sol:Frame",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)5787_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}